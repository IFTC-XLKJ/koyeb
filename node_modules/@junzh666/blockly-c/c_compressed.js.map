{"version":3,"sources":["generators/c/colour.ts","generators/c/lists.ts","generators/c/logic.ts","generators/c/loops.ts","generators/c/math.ts","generators/c/procedures.ts","generators/c/text.ts","generators/c/variables.ts","generators/c/customs.ts","generators/c/variables_dynamic.ts","generators/c.ts"],"names":["colour_picker","block","generator","quote_","code","getFieldValue","Order","ATOMIC","colour_random","provideFunction_","functionName","FUNCTION_NAME_PLACEHOLDER_","CALL","colour_rgb","red","valueToCode","NONE","green","blue","colour_blend","c1","c2","ratio","lists_create_empty","lists_create_with","elements","Array","itemCount_","i","join","lists_repeat","element","repeatCount","lists_length","MEMBER","lists_isEmpty","UNARY","lists_indexOf","operator","item","workspace","options","oneBasedIndex","ADDITION","lists_getIndex","mode","where","list","listOrder","at","getAdjusted","Error","lists_setIndex","cacheList","match","listVar","nameDB_","getDistinctName","NameType","VARIABLE","value","ASSIGNMENT","xVar","lists_getSublist","wherePascalCase","where1","where2","at1","at2","at1Param","at2Param","getSubstringIndex","lists_sort","direction","type","getCompareFunctionName","lists_split","input","delimiter","lists_reverse","controls_if","n","STATEMENT_PREFIX","injectId","conditionCode","branchCode","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","OPERATORS","order","EQUALITY","RELATIONAL","argument0","argument1","logic_operation","LOGICAL_AND","LOGICAL_OR","defaultArgument","logic_negate","logic_boolean","logic_null","logic_ternary","value_if","CONDITIONAL","value_then","value_else","controls_repeat_ext","repeats","getField","String","Number","branch","addLoopTrap","loopVar","endVar","isNumber","controls_whileUntil","until","controls_for","variable0","getVariableName","increment","up","step","Math","abs","startVar","incVar","controls_forEach","indexVar","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","number","math_arithmetic","tuple","MULTIPLICATION","math_single","arg","math_constant","CONSTANTS","math_number_property","PROPERTIES","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","getVars","length","scrub_","definitions_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","text_multiline","multiline_quote_","indexOf","text_join","codeAndOrder","forceString","element0","element1","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","textOrder","text_getSubstring","requiresLengthCall","text_changeCase","text_trim","text_print","msg","slice","text_prompt_ext","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","custom_get_temparature","char","nameValue","contextValue","globalNames","includes","push","string_","customcharname","name","customintname","customStructname","alarm_struct","dropdown_name","text_name","globalStructVarNames","uint32_t","variableName","globalintNames","string_set","st_length","int_set","structure","globalStructNames","replace","dependent_dropdown_example","$jscomp$tmp$exports$module$name","listName","opt_at","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","strRegExp","test","stringName","text_prompt","cGenerator","CGenerator","generators","colour","lists","logic","loops","math","procedures","variablesDynamic","custom"],"mappings":"A;;;;;;;;;;;;;;AAgBMA,IAAAA,oDAAAA,QAAuBA,CAC3BC,CAD2BD,CAE3BE,CAF2BF,CAENA,CAIrBA,MAAOA,CADME,CAAUC,CAAAA,MAAVC,CAAiBH,CAAMI,CAAAA,aAANL,CAAoBA,QAApBA,CAAjBI,CACNJ,CAAOM,CAAAA,CAAAA,gDAAMC,CAAAA,MAAbP,CAJcA,CAFjBA,CASAQ,oDAAAA,QAAuBA,CAC3BP,CAD2BO,CAE3BN,CAF2BM,CAENA,CAarBA,MAAOA,CAVcN,CAAUO,CAAAA,gBAAVC,CACnBF,cADmBE,CAEnBF;WACON,CAAUS,CAAAA,0BADjBH;;;;CAFmBE,CAUdF,CADqBA,IACrBA,CAAOF,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbJ,CAbcA,CAXjBR,CA2BAa,iDAAAA,QAAoBA,CACxBZ,CADwBY,CAExBX,CAFwBW,CAEHA,CAGrBA,MAAMC,EAAMZ,CAAUa,CAAAA,WAAVF,CAAsBZ,CAAtBY,CAA6BA,KAA7BA,CAAoCP,CAAAA,CAAAA,gDAAMU,CAAAA,IAA1CH,CAANC,EAAyDD,CAA/DA,CACMI,EAAQf,CAAUa,CAAAA,WAAVF,CAAsBZ,CAAtBY,CAA6BA,OAA7BA,CAAsCP,CAAAA,CAAAA,gDAAMU,CAAAA,IAA5CH,CAARI,EAA6DJ,CAC7DK,EAAAA,CAAOhB,CAAUa,CAAAA,WAAVF,CAAsBZ,CAAtBY,CAA6BA,MAA7BA,CAAqCP,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3CH,CAAPK,EAA2DL,CAgBjEA,OAAOA,CAfcX,CAAUO,CAAAA,gBAAVC,CACnBG,WADmBH,CAEnBG;WACOX,CAAUS,CAAAA,0BADjBE;;;;;;;;;CAFmBH,CAedG,CADqBA,GACrBA,CAD2BC,CAC3BD,CADiCA,IACjCA,CADwCI,CACxCJ,CADgDA,IAChDA,CADuDK,CACvDL,CAD8DA,GAC9DA,CAAOP,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbC,CArBcA,CA7BjBb,CAqDAmB,mDAAAA,QAAsBA,CAC1BlB,CAD0BkB,CAE1BjB,CAF0BiB,CAELA,CAGrBA,MAAMC,EAAKlB,CAAUa,CAAAA,WAAVI,CAAsBlB,CAAtBkB,CAA6BA,SAA7BA,CAAwCb,CAAAA,CAAAA,gDAAMU,CAAAA,IAA9CG,CAALC,EAA4DD,WAAlEA,CACME,EAAKnB,CAAUa,CAAAA,WAAVI,CAAsBlB,CAAtBkB,CAA6BA,SAA7BA,CAAwCb,CAAAA,CAAAA,gDAAMU,CAAAA,IAA9CG,CAALE,EAA4DF,WAC5DG,EAAAA,CAAQpB,CAAUa,CAAAA,WAAVI,CAAsBlB,CAAtBkB,CAA6BA,OAA7BA,CAAsCb,CAAAA,CAAAA,gDAAMU,CAAAA,IAA5CG,CAARG,EAA6DH,EAuBnEA,OAAOA,CAtBcjB,CAAUO,CAAAA,gBAAVC,CACnBS,aADmBT,CAEnBS;WACOjB,CAAUS,CAAAA,0BADjBQ;;;;;;;;;;;;;;;;CAFmBT,CAsBdS,CADqBA,GACrBA,CAD2BC,CAC3BD,CADgCA,IAChCA,CADuCE,CACvCF,CAD4CA,IAC5CA,CADmDG,CACnDH,CAD2DA,GAC3DA,CAAOb,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbO,CA5BcA,CAvDjBnB,CCEAuB,wDAAAA,QAA4BA,CAChCtB,CADgCsB,CAEhCrB,CAFgCqB,CAEXA,CAGrBA,MAAOA,CAACA,IAADA,CAAOjB,CAAAA,CAAAA,gDAAMC,CAAAA,MAAbgB,CAHcA,CDJjBvB,CCUAwB,uDAAAA,QAA2BA,CAC/BvB,CAD+BuB,CAE/BtB,CAF+BsB,CAEVA,CAIrBA,MAAMC,EAAeC,KAAJF,CADOvB,CACmB0B,CAAAA,UAA1BH,CACjBA,KAAKA,IAAII,EAAIJ,CAAbA,CAAgBI,CAAhBJ,CAFwBvB,CAEY0B,CAAAA,UAApCH,CAAgDI,CAAAJ,EAAhDA,CACEC,CAAAD,CAASI,CAATJ,CAAAA,CAActB,CAAUa,CAAAA,WAAVS,CAAsBvB,CAAtBuB,CAA6BA,KAA7BA,CAAqCI,CAArCJ,CAAwClB,CAAAA,CAAAA,gDAAMU,CAAAA,IAA9CQ,CAAdA,EAAqEA,MAGvEA,OAAOA,CADMA,GACNA,CADYC,CAASI,CAAAA,IAATL,CAAcA,IAAdA,CACZA,CADkCA,GAClCA,CAAOlB,CAAAA,CAAAA,gDAAMC,CAAAA,MAAbiB,CATcA,CDZjBxB;ACwBA8B,kDAAAA,QAAsBA,CAC1B7B,CAD0B6B,CAE1B5B,CAF0B4B,CAELA,CAGrBA,MAAMpB,EAAeR,CAAUO,CAAAA,gBAAVqB,CACnBA,aADmBA,CAEnBA;WACO5B,CAAUS,CAAAA,0BADjBmB;;;;;;;CAFmBA,CAArBA,CAYMC,EAAU7B,CAAUa,CAAAA,WAAVe,CAAsB7B,CAAtB6B,CAA6BA,MAA7BA,CAAqCxB,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3Cc,CAAVC,EAA8DD,MAC9DE,EAAAA,CAAc9B,CAAUa,CAAAA,WAAVe,CAAsB7B,CAAtB6B,CAA6BA,KAA7BA,CAAoCxB,CAAAA,CAAAA,gDAAMU,CAAAA,IAA1Cc,CAAdE,EAAiEF,GAEvEA,OAAOA,CADMpB,CACNoB,CADqBA,GACrBA,CAD2BC,CAC3BD,CADqCA,IACrCA,CAD4CE,CAC5CF,CAD0DA,GAC1DA,CAAOxB,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbkB,CAlBcA,CD1BjB9B,CC+CAiC,kDAAAA,QAAsBA,CAC1BhC,CAD0BgC,CAE1B/B,CAF0B+B,CAELA,CAIrBA,MAAOA,EADM/B,CAAUa,CAAAA,WAAVkB,CAAsBhC,CAAtBgC,CAA6BA,OAA7BA,CAAsC3B,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA5CD,CACNA,EAD6DA,IAC7DA,EAAQA,SAARA,CAAmB3B,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAzBD,CAJcA,CDjDjBjC,CCwDAmC;AAAAA,QAAuBA,CAC3BlC,CAD2BkC,CAE3BjC,CAF2BiC,CAENA,CAIrBA,MAAOA,CAACA,GAADA,EADMjC,CAAUa,CAAAA,WAAVoB,CAAsBlC,CAAtBkC,CAA6BA,OAA7BA,CAAsC7B,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA5CC,CACNA,EAD6DA,IAC7DA,EAAcA,SAAdA,CAAyB7B,CAAAA,CAAAA,gDAAM8B,CAAAA,KAA/BD,CAJcA,CD1DjBnC,CCiEAqC,mDAAAA,QAAuBA,CAC3BpC,CAD2BoC,CAE3BnC,CAF2BmC,CAENA,CAGrBA,MAAMC,EAC2BD,OAA/BA,GAAApC,CAAMI,CAAAA,aAANgC,CAAoBA,KAApBA,CAAAA,CAAyCA,SAAzCA,CAAqDA,aADvDA,CAEME,EAAOrC,CAAUa,CAAAA,WAAVsB,CAAsBpC,CAAtBoC,CAA6BA,MAA7BA,CAAqC/B,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3CqB,CAAPE,EAA2DF,IAE3DjC,EAAAA,EADOF,CAAUa,CAAAA,WAAVsB,CAAsBpC,CAAtBoC,CAA6BA,OAA7BA,CAAsC/B,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA5CG,CACPjC,EAD8DiC,IAC9DjC,EAAciC,GAAdjC,CAAoBkC,CAApBlC;AAA+BiC,GAA/BjC,CAAqCmC,CAArCnC,CAA4CiC,GAClDA,OAAIpC,EAAMuC,CAAAA,SAAUC,CAAAA,OAAQC,CAAAA,aAA5BL,CACSA,CAACjC,CAADiC,CAAQA,MAARA,CAAgB/B,CAAAA,CAAAA,gDAAMqC,CAAAA,QAAtBN,CADTA,CAGOA,CAACjC,CAADiC,CAAO/B,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbyB,CAXcA,CDnEjBrC,CCiFA4C,oDAAAA,QAAwBA,CAC5B3C,CAD4B2C,CAE5B1C,CAF4B0C,CAEPA,CAIrBA,MAAMC,EAAO5C,CAAMI,CAAAA,aAANuC,CAAoBA,MAApBA,CAAPC,EAAsCD,KAA5CA,CACME,EAAQ7C,CAAMI,CAAAA,aAANuC,CAAoBA,OAApBA,CAARE,EAAwCF,YAE9CA,KAAMG,EAAO7C,CAAUa,CAAAA,WAAV6B,CAAsB3C,CAAtB2C,CAA6BA,OAA7BA,CADeA,QAAVI,GAAAF,CAAAE,CAAqB1C,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3BgC,CAAkC1C,CAAAA,CAAAA,gDAAM4B,CAAAA,MAC7CU,CAAPG,EAA2DH,IAEjEA,QAAQE,CAARF,EACEA,KAAKA,OAALA,CACEA,GAAaA,KAAbA;AAAIC,CAAJD,CAEEA,MAAOA,CADMG,CACNH,CADaA,KACbA,CAAOtC,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAbU,CACFA,IAAaA,YAAbA,GAAIC,CAAJD,CAELA,MAAOA,CADMG,CACNH,CADaA,UACbA,CAAOtC,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAbU,CACFA,IAAaA,QAAbA,GAAIC,CAAJD,CACLA,MAAOG,EAAPH,CAAcA,aAEhBA,MACFA,MAAKA,MAALA,CACEA,GAAaA,KAAbA,GAAIC,CAAJD,CAEEA,MAAOA,CADMG,CACNH,CADaA,eACbA,CAAOtC,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAbU,CACFA,IAAaA,YAAbA,GAAIC,CAAJD,CAELA,MAAOA,CADMG,CACNH,CADaA,QACbA,CAAOtC,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAbU,CACFA,IAAaA,QAAbA,GAAIC,CAAJD,CACLA,MAAOG,EAAPH,CAAcA,WAEhBA,MACFA,MAAKA,YAALA,CACQK,CAAAA,CAAK/C,CAAUgD,CAAAA,WAAVN,CAAsB3C,CAAtB2C;AAA6BA,IAA7BA,CACXA,IAAaA,KAAbA,GAAIC,CAAJD,CAEEA,MAAOA,CADMG,CACNH,CADaA,GACbA,CADmBK,CACnBL,CADwBA,GACxBA,CAAOtC,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAbU,CACFA,IAAaA,YAAbA,GAAIC,CAAJD,CAELA,MAAOA,CADMG,CACNH,CADaA,UACbA,CAD0BK,CAC1BL,CAD+BA,SAC/BA,CAAOtC,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbgC,CACFA,IAAaA,QAAbA,GAAIC,CAAJD,CACLA,MAAOG,EAAPH,CAAcA,UAAdA,CAA2BK,CAA3BL,CAAgCA,SAElCA,MAEFA,MAAKA,UAALA,CACQK,CAAAA,CAAK/C,CAAUgD,CAAAA,WAAVN,CAAsB3C,CAAtB2C,CAA6BA,IAA7BA,CAAmCA,CAAnCA,CAAsCA,CAAAA,CAAtCA,CACXA,IAAaA,KAAbA,GAAIC,CAAJD,CAEEA,MAAOA,CADMG,CACNH,CADaA,SACbA,CADyBK,CACzBL,CAD8BA,MAC9BA,CAAOtC,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbgC,CACFA,IAAaA,YAAbA,GAAIC,CAAJD,CAELA,MAAOA,CADMG,CACNH,CADaA,UACbA,CAD0BK,CAC1BL,CAD+BA,SAC/BA,CAAOtC,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbgC,CACFA;GAAaA,QAAbA,GAAIC,CAAJD,CACLA,MAAOG,EAAPH,CAAcA,UAAdA,CAA2BK,CAA3BL,CAAgCA,OAElCA,MAEFA,MAAKA,QAALA,CAcQxC,CAAAA,CAbeF,CAAUO,CAAAA,gBAAVC,CACnBkC,oBADmBlC,CAEnBkC;WACG1C,CAAUS,CAAAA,0BADbiC;;;;;;;;CAFmBlC,CAafN,CAAsBwC,GAAtBxC,CAA4B2C,CAA5B3C,CAAmCwC,IAAnCxC,EAAoDwC,KAApDxC,GAA2CyC,CAA3CzC,EAA6DwC,GACnEA,IAAaA,KAAbA,GAAIC,CAAJD,EAA+BA,YAA/BA,GAAsBC,CAAtBD,CACEA,MAAOA,CAACxC,CAADwC,CAAOtC,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbgC,CACFA,IAAaA,QAAbA,GAAIC,CAAJD,CACLA,MAAOxC,EAAPwC,CAAcA,KAnEpBA,CAwEAA,KAAMO,MAAAP,CAAMA,yCAANA,CAANA,CAjFqBA,CDnFjB5C,CCuKAoD,oDAAAA,QAAwBA,CAACnD,CAADmD,CAAelD,CAAfkD,CAAoCA,CAShEC,QAASA,EAASD,EAAAA,CAChBA,GAAIL,CAAKO,CAAAA,KAALF,CAAWA,OAAXA,CAAJA,CACEA,MAAOA,EAETA,OAAMG,EAAUrD,CAAUsD,CAAAA,OAASC,CAAAA,eAAnBL,CACdA,SADcA,CAEdM,CAAAA,CAAAA,qCAASC,CAAAA,QAFKP,CAAhBA,CAIMhD,EAAOgD,MAAPhD,CAAgBmD,CAAhBnD,CAA0BgD,KAA1BhD,CAAkC2C,CAAlC3C,CAAyCgD,KAC/CL,EAAAK,CAAOG,CACPH,OAAOhD,EAVSgD,CANlBA,IAAIL,EAAO7C,CAAUa,CAAAA,WAAVqC,CAAsBnD,CAAtBmD,CAA6BA,MAA7BA,CAAqC9C,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA3CkB,CAAPL;AAA6DK,IACjEA,OAAMP,EAAO5C,CAAMI,CAAAA,aAAN+C,CAAoBA,MAApBA,CAAPP,EAAsCO,KAC5CA,KAAMN,EAAQ7C,CAAMI,CAAAA,aAAN+C,CAAoBA,OAApBA,CAARN,EAAwCM,YAC9CA,OAAMQ,EAAQ1D,CAAUa,CAAAA,WAAVqC,CAAsBnD,CAAtBmD,CAA6BA,IAA7BA,CAAmC9C,CAAAA,CAAAA,gDAAMuD,CAAAA,UAAzCT,CAARQ,EAAgER,MAetEA,QAAQN,CAARM,EACEA,KAAKA,OAALA,CACEA,GAAaA,KAAbA,GAAIP,CAAJO,CACEA,MAAOL,EAAPK,CAAcA,QAAdA,CAAyBQ,CAAzBR,CAAiCA,KAC5BA,IAAaA,QAAbA,GAAIP,CAAJO,CACLA,MAAOL,EAAPK,CAAcA,WAAdA,CAA4BQ,CAA5BR,CAAoCA,MAEtCA,MACFA,MAAKA,MAALA,CACEA,GAAaA,KAAbA,GAAIP,CAAJO,CAGEA,MAFWC,EAAAjD,EAEXgD,EADQL,CACRK,CADeA,GACfA,CADqBL,CACrBK,CAD4BA,iBAC5BA,CADgDQ,CAChDR,CADwDA,KACxDA,CACKA,IAAaA,QAAbA,GAAIP,CAAJO,CACLA,MAAOL,EAAPK,CAAcA,QAAdA,CAAyBQ,CAAzBR,CAAiCA,MAEnCA,MACFA,MAAKA,YAALA,CACQH,CAAAA,CAAK/C,CAAUgD,CAAAA,WAAVE,CAAsBnD,CAAtBmD,CAA6BA,IAA7BA,CACXA,IAAaA,KAAbA,GAAIP,CAAJO,CACEA,MAAOL,EAAPK,CAAcA,GAAdA,CAAoBH,CAApBG,CAAyBA,MAAzBA;AAAkCQ,CAAlCR,CAA0CA,KACrCA,IAAaA,QAAbA,GAAIP,CAAJO,CACLA,MAAOL,EAAPK,CAAcA,UAAdA,CAA2BH,CAA3BG,CAAgCA,OAAhCA,CAA0CQ,CAA1CR,CAAkDA,MAEpDA,MAEFA,MAAKA,UAALA,CACQH,CAAAA,CAAK/C,CAAUgD,CAAAA,WAAVE,CACTnD,CADSmD,CAETA,IAFSA,CAGTA,CAHSA,CAITA,CAAAA,CAJSA,CAKT9C,CAAAA,CAAAA,gDAAMqC,CAAAA,QALGS,CAOPhD,EAAAA,CAAOiD,CAAAD,EACXA,IAAaA,KAAbA,GAAIP,CAAJO,CAEEA,MADAhD,EACAgD,EADQL,CACRK,CADeA,GACfA,CADqBL,CACrBK,CAD4BA,YAC5BA,CAD2CH,CAC3CG,CADgDA,MAChDA,CADyDQ,CACzDR,CADiEA,KACjEA,CACKA,IAAaA,QAAbA,GAAIP,CAAJO,CAULA,MATAhD,EASAgD,EAREL,CAQFK,CAPEA,UAOFA,CANEL,CAMFK,CALEA,YAKFA,CAJEH,CAIFG,CAHEA,OAGFA,CAFEQ,CAEFR,CADEA,MACFA,CAEFA,MAEFA,MAAKA,QAALA,CACMhD,CAAAA,CAAOiD,CAAAD,EACLU,EAAAA,CAAO5D,CAAUsD,CAAAA,OAASC,CAAAA,eAAnBL,CACXA,MADWA,CAEXM,CAAAA,CAAAA,qCAASC,CAAAA,QAFEP,CAIbhD,EAAAgD,EACEA,MADFA,CACWU,CADXV,CACkBA,gCADlBA,CACqDL,CADrDK,CAC4DA,aAC5DA,IAAaA,KAAbA,GAAIP,CAAJO,CAEEA,MADAhD,EACAgD;CADQL,CACRK,CADeA,GACfA,CADqBU,CACrBV,CAD4BA,MAC5BA,CADqCQ,CACrCR,CAD6CA,KAC7CA,CACKA,IAAaA,QAAbA,GAAIP,CAAJO,CAELA,MADAhD,EACAgD,EADQL,CACRK,CADeA,UACfA,CAD4BU,CAC5BV,CADmCA,OACnCA,CAD6CQ,CAC7CR,CADqDA,MACrDA,CAjENA,CAsEAA,KAAMD,MAAAC,CAAMA,yCAANA,CAANA,CA3FgEA,CDvK5DpD,CC4RA+D,sDAAAA,QAA0BA,CAC9B9D,CAD8B8D,CAE9B7D,CAF8B6D,CAETA,CAIrBA,IAAMC,EAAkBD,CACtBA,MAASA,OADaA,CAEtBA,KAAQA,MAFcA,CAGtBA,WAAcA,WAHQA,CAItBA,SAAYA,SAJUA,CAAxBA,CAOMhB,EAAO7C,CAAUa,CAAAA,WAAVgD,CAAsB9D,CAAtB8D,CAA6BA,MAA7BA,CAAqCzD,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA3C6B,CAAPhB,EAA6DgB,IACnEA,OAAME,EAAShE,CAAMI,CAAAA,aAAN0D,CAAoBA,QAApBA,CAAfA,CACMG,EAASjE,CAAMI,CAAAA,aAAN0D,CAAoBA,QAApBA,CAEfA,IAAeA,OAAfA,GAAIE,CAAJF,EAAqCA,MAArCA,GAA0BG,CAA1BH,CACShB,CAAPgB,EAAcA,WADhBA,KAEOA,IACLhB,CAAKO,CAAAA,KAALS,CAAWA,OAAXA,CADKA;AAEOA,UAFPA,GAEJE,CAFIF,EAEgCA,YAFhCA,GAEqBG,CAFrBH,CAGLA,CAIAA,OAAQE,CAARF,EACEA,KAAKA,YAALA,CACEI,CAAAJ,CAAM7D,CAAUgD,CAAAA,WAAVa,CAAsB9D,CAAtB8D,CAA6BA,KAA7BA,CACNA,MACFA,MAAKA,UAALA,CACEI,CAAAJ,CAAM7D,CAAUgD,CAAAA,WAAVa,CAAsB9D,CAAtB8D,CAA6BA,KAA7BA,CAAoCA,CAApCA,CAAuCA,CAAAA,CAAvCA,CAA8CzD,CAAAA,CAAAA,gDAAMqC,CAAAA,QAApDoB,CACNI,EAAAJ,CAAMhB,CAANgB,CAAaA,YAAbA,CAA4BI,CAC5BJ,MACFA,MAAKA,OAALA,CACEI,CAAAJ,CAAMA,GACNA,MACFA,SACEA,KAAMZ,MAAAY,CAAMA,sCAANA,CAANA,CAZJA,CAeAA,OAAQG,CAARH,EACEA,KAAKA,YAALA,CACEK,CAAAL,CAAM7D,CAAUgD,CAAAA,WAAVa,CAAsB9D,CAAtB8D,CAA6BA,KAA7BA,CAAoCA,CAApCA,CACNA,MACFA,MAAKA,UAALA,CACEK,CAAAL,CAAM7D,CAAUgD,CAAAA,WAAVa,CAAsB9D,CAAtB8D,CAA6BA,KAA7BA,CAAoCA,CAApCA,CAAuCA,CAAAA,CAAvCA,CAA8CzD,CAAAA,CAAAA,gDAAMqC,CAAAA,QAApDoB,CACNK,EAAAL,CAAMhB,CAANgB,CAAaA,YAAbA,CAA4BK,CAC5BL,MACFA;KAAKA,MAALA,CACEK,CAAAL,CAAMhB,CAANgB,CAAaA,SACbA,MACFA,SACEA,KAAMZ,MAAAY,CAAMA,sCAANA,CAANA,CAZJA,CAcA3D,CAAA2D,CAAOhB,CAAPgB,CAAcA,SAAdA,CAA0BI,CAA1BJ,CAAgCA,IAAhCA,CAAuCK,CAAvCL,CAA6CA,GAjC7CA,CAHKA,IAqCAA,CACLA,MAAMI,EAAMjE,CAAUgD,CAAAA,WAAVa,CAAsB9D,CAAtB8D,CAA6BA,KAA7BA,CACNK,EAAAA,CAAMlE,CAAUgD,CAAAA,WAAVa,CAAsB9D,CAAtB8D,CAA6BA,KAA7BA,CAmBZ3D,EAAA2D,CAZqB7D,CAAUO,CAAAA,gBAAVC,CACnBqD,aADmBrD,CACHsD,CAAAD,CAAgBE,CAAhBF,CADGrD,CACuBsD,CAAAD,CAAgBG,CAAhBH,CADvBrD,CAEnBqD;WAEE7D,CAAUS,CAAAA,0BAFZoD,YALWA,UAAXM,GAAAJ,CAAAI,EAAoCN,YAApCM,GAAyBJ,CAAzBI,CAAmDN,OAAnDM,CAA6DN,EAK7DA,GAHWA,UAAXO,GAAAJ,CAAAI,EAAoCP,YAApCO,GAAyBJ,CAAzBI,CAAmDP,OAAnDO,CAA6DP,EAG7DA;gBAIUQ,sDAAAR,CAAkBA,UAAlBA,CAA8BE,CAA9BF,CAAsCA,KAAtCA,CAJVA;cAKQQ,sDAAAR,CAAkBA,UAAlBA,CAA8BG,CAA9BH,CAAsCA,KAAtCA,CALRA;;;CAFmBrD,CAYrBqD,CAEEA,GAFFA,CAGEhB,CAHFgB,EAMcA,UAAXA,GAAAE,CAAAF,EAAoCA,YAApCA,GAAyBE,CAAzBF,CAAmDA,IAAnDA,CAA0DI,CAA1DJ,CAAgEA,EANnEA,GAOcA,UAAXA,GAAAG,CAAAH,EAAoCA,YAApCA,GAAyBG,CAAzBH,CAAmDA,IAAnDA,CAA0DK,CAA1DL,CAAgEA,EAPnEA,EAQEA,GA7BGA,CA+BPA,MAAOA,CAAC3D,CAAD2D,CAAOzD,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbmD,CArFcA,CD9RjB/D,CCsXAwE,gDAAAA,QAAoBA,CACxBvE,CADwBuE,CAExBtE,CAFwBsE,CAEHA,CAGrBA,MAAMzB,EACJ7C,CAAUa,CAAAA,WAAVyD,CAAsBvE,CAAtBuE,CAA6BA,MAA7BA,CAAqClE,CAAAA,CAAAA,gDAAMM,CAAAA,IAA3C4D,CADIzB,EACgDyB,IADtDA,CAEMC,EAAiDD,GAArCA,GAAAvE,CAAMI,CAAAA,aAANmE,CAAoBA,WAApBA,CAAAA,CAA2CA,CAA3CA,CAA+CA,CAACA,CAC5DE,EAAAA,CAAOzE,CAAMI,CAAAA,aAANmE,CAAoBA,MAApBA,CACPG,EAAAA,CAAyBzE,CAAUO,CAAAA,gBAAV+D,CAC7BA,qBAD6BA,CAE7BA;WACOtE,CAAUS,CAAAA,0BADjB6D;;;;;;;;;;;;OAF6BA,CAiB/BA,OAAOA,CACLzB,CADKyB,CAEHA,gBAFGA,CAGHG,CAHGH,CAIHA,IAJGA,CAKHE,CALGF,CAMHA,KANGA,CAOHC,CAPGD,CAQHA,IARGA,CASLlE,CAAAA,CAAAA,gDAAMM,CAAAA,IATD4D,CAxBcA,CDxXjBxE,CC6ZA4E,iDAAAA,QAAqBA,CACzB3E,CADyB2E,CAEzB1E,CAFyB0E,CAEJA,CAGrBA,IAAIC,EAAQ3E,CAAUa,CAAAA,WAAV6D,CAAsB3E,CAAtB2E,CAA6BA,OAA7BA,CAAsCtE,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA5C0C,CACNE,EAAAA,CAAY5E,CAAUa,CAAAA,WAAV6D,CAAsB3E,CAAtB2E,CAA6BA,OAA7BA,CAAsCtE,CAAAA,CAAAA,gDAAMU,CAAAA,IAA5C4D,CAAZE,EAAiEF,IACjE/B,EAAAA,CAAO5C,CAAMI,CAAAA,aAANuE,CAAoBA,MAApBA,CAEbA,IAAaA,OAAbA,GAAI/B,CAAJ+B,CACOC,CAGLD,GAFEC,CAEFD,CAFUA,IAEVA,EAAAlE,CAAAkE,CAAeA,OAJjBA,KAKOA,IAAaA,MAAbA,GAAI/B,CAAJ+B,CACAC,CAGLD,GAFEC,CAEFD,CAFUA,IAEVA,EAAAlE,CAAAkE,CAAeA,MAJVA,KAMLA,MAAMzB,MAAAyB,CAAMA,gBAANA,CAAyB/B,CAAzB+B,CAANA,CAGFA,MAAOA,CADMC,CACND;AADcA,GACdA,CADoBlE,CACpBkE,CADmCA,GACnCA,CADyCE,CACzCF,CADqDA,GACrDA,CAAOtE,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbgE,CArBcA,CD/ZjB5E,CCubA+E,mDAAAA,QAAuBA,CAC3B9E,CAD2B8E,CAE3B7E,CAF2B6E,CAENA,CAMrBA,MAAOA,EAFL7E,CAAUa,CAAAA,WAAVgE,CAAsB9E,CAAtB8E,CAA6BA,MAA7BA,CAAqCzE,CAAAA,CAAAA,gDAAMM,CAAAA,IAA3CmE,CAEKA,EAF+CA,IAE/CA,EADaA,oBACbA,CAAOzE,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbmE,CANcA,CDzbjB/E,CEAAgF,iDAAAA,QAAqBA,CAAC/E,CAAD+E,CAAe9E,CAAf8E,CAAoCA,CAE7DA,IAAIC,EAAID,CACRA,KAAI5E,EAAO4E,EACP9E,EAAUgF,CAAAA,gBAAdF,GAEE5E,CAFF4E,EAEU9E,CAAUiF,CAAAA,QAAVH,CAAmB9E,CAAUgF,CAAAA,gBAA7BF,CAA+C/E,CAA/C+E,CAFVA,CAIAA,GAAGA,CACDA,MAAMI,EACJlF,CAAUa,CAAAA,WAAViE,CAAsB/E,CAAtB+E,CAA6BA,IAA7BA,CAAoCC,CAApCD,CAAuC1E,CAAAA,CAAAA,gDAAMU,CAAAA,IAA7CgE,CADII;AACkDJ,OACxDA,KAAIK,EAAanF,CAAUoF,CAAAA,eAAVN,CAA0B/E,CAA1B+E,CAAiCA,IAAjCA,CAAwCC,CAAxCD,CACb9E,EAAUqF,CAAAA,gBAAdP,GACEK,CADFL,CAEI9E,CAAUsF,CAAAA,WAAVR,CACE9E,CAAUiF,CAAAA,QAAVH,CAAmB9E,CAAUqF,CAAAA,gBAA7BP,CAA+C/E,CAA/C+E,CADFA,CAEE9E,CAAUuF,CAAAA,MAFZT,CAFJA,CAKQK,CALRL,CAOA5E,EAAA4E,GACOA,CAAJA,CAAAC,CAAAD,CAAQA,QAARA,CAAmBA,EADtBA,EAEEA,MAFFA,CAGEI,CAHFJ,CAIEA,OAJFA,CAKEK,CALFL,CAMEA,GACFC,EAAAD,EAlBCA,CAAHA,MAmBS/E,CAAMyF,CAAAA,QAANV,CAAeA,IAAfA,CAAsBC,CAAtBD,CAnBTA,CAqBAA,IAAI/E,CAAMyF,CAAAA,QAANV,CAAeA,MAAfA,CAAJA,EAA8B9E,CAAUqF,CAAAA,gBAAxCP,CACMK,CAQJL,CARiB9E,CAAUoF,CAAAA,eAAVN,CAA0B/E,CAA1B+E,CAAiCA,MAAjCA,CAQjBA,CAPI9E,CAAUqF,CAAAA,gBAOdP,GANEK,CAMFL,CALI9E,CAAUsF,CAAAA,WAAVR,CACE9E,CAAUiF,CAAAA,QAAVH,CAAmB9E,CAAUqF,CAAAA,gBAA7BP,CAA+C/E,CAA/C+E,CADFA,CAEE9E,CAAUuF,CAAAA,MAFZT,CAKJA,CAFQK,CAERL,EAAA5E,CAAA4E,EAAQA,WAARA,CAAsBK,CAAtBL,CAAmCA,GAErCA,OAAO5E,EAAP4E,CAAcA,IAxC+CA,CFAzDhF,CE6CA2F,mDAAAA,QAAuBA,CAC3B1F,CAD2B0F,CAE3BzF,CAF2ByF,CAENA,CAYrBA,MAAMrD,EATYsD,CAChBD,GAAMA,IADUC,CAEhBD,IAAOA,IAFSC,CAGhBD,GAAMA,GAHUC,CAIhBD,IAAOA,IAJSC,CAKhBD,GAAMA,GALUC;AAMhBD,IAAOA,IANSC,CASDD,CAAU1F,CAAMI,CAAAA,aAANsF,CAAoBA,IAApBA,CAAVA,CAAjBA,CACME,EACSF,IAAbA,GAAArD,CAAAqD,EAAkCA,IAAlCA,GAAqBrD,CAArBqD,CAAyCrF,CAAAA,CAAAA,gDAAMwF,CAAAA,QAA/CH,CAA0DrF,CAAAA,CAAAA,gDAAMyF,CAAAA,UAFlEJ,CAGMK,EAAY9F,CAAUa,CAAAA,WAAV4E,CAAsB1F,CAAtB0F,CAA6BA,GAA7BA,CAAkCE,CAAlCF,CAAZK,EAAwDL,GACxDM,EAAAA,CAAY/F,CAAUa,CAAAA,WAAV4E,CAAsB1F,CAAtB0F,CAA6BA,GAA7BA,CAAkCE,CAAlCF,CAAZM,EAAwDN,GAE9DA,OAAOA,CADMK,CACNL,CADkBA,GAClBA,CADwBrD,CACxBqD,CADmCA,GACnCA,CADyCM,CACzCN,CAAOE,CAAPF,CAlBcA,CF/CjB3F,CEoEAkG,qDAAAA,QAAyBA,CAC7BjG,CAD6BiG,CAE7BhG,CAF6BgG,CAERA,CAGrBA,MAAM5D,EAAyC4D,KAA9BA,GAAAjG,CAAMI,CAAAA,aAAN6F,CAAoBA,IAApBA,CAAAA,CAAsCA,IAAtCA,CAA6CA,IAA9DA,CACML,EAAqBK,IAAbA,GAAA5D,CAAA4D,CAAoB5F,CAAAA,CAAAA,gDAAM6F,CAAAA,WAA1BD,CAAwC5F,CAAAA,CAAAA,gDAAM8F,CAAAA,UAC5DF;IAAIF,EAAY9F,CAAUa,CAAAA,WAAVmF,CAAsBjG,CAAtBiG,CAA6BA,GAA7BA,CAAkCL,CAAlCK,CACZD,EAAAA,CAAY/F,CAAUa,CAAAA,WAAVmF,CAAsBjG,CAAtBiG,CAA6BA,GAA7BA,CAAkCL,CAAlCK,CACXF,EAALE,EAAmBD,CAAnBC,EAMQG,CAINH,CAJqCA,IAAbA,GAAA5D,CAAA4D,CAAoBA,MAApBA,CAA6BA,OAIrDA,CAHKF,CAGLE,GAFEF,CAEFE,CAFcG,CAEdH,EAAKD,CAALC,GACED,CADFC,CACcG,CADdH,CAVFA,EAGED,CAHFC,CAEEF,CAFFE,CAEcA,OAadA,OAAOA,CADMF,CACNE,CADkBA,GAClBA,CADwB5D,CACxB4D,CADmCA,GACnCA,CADyCD,CACzCC,CAAOL,CAAPK,CAtBcA,CFtEjBlG,CE+FAsG,kDAAAA,QAAsBA,CAC1BrG,CAD0BqG,CAE1BpG,CAF0BoG,CAELA,CAGrBA,MAAMT,EAAQvF,CAAAA,CAAAA,gDAAM8B,CAAAA,KAGpBkE,OAAOA,CADMA,GACNA,EAFWpG,CAAUa,CAAAA,WAAVuF,CAAsBrG,CAAtBqG,CAA6BA,MAA7BA,CAAqCT,CAArCS,CAEXA,EAF0DA,MAE1DA,EAAOT,CAAPS,CANcA,CFjGjBtG,CE0GAuG,mDAAAA,QAAuBA,CAC3BtG,CAD2BsG,CAE3BrG,CAF2BqG,CAENA,CAIrBA,MAAOA,CADsCA,MAAhCnG,GAAAH,CAAMI,CAAAA,aAANkG,CAAoBA,MAApBA,CAAAnG,CAAyCmG,MAAzCnG,CAAkDmG,OACxDA,CAAOjG,CAAAA,CAAAA,gDAAMC,CAAAA,MAAbgG,CAJcA,CF5GjBvG;AEmHAwG,gDAAAA,QAAoBA,CACxBvG,CADwBuG,CAExBtG,CAFwBsG,CAEHA,CAKrBA,MAAOA,CAACA,MAADA,CAASlG,CAAAA,CAAAA,gDAAMC,CAAAA,MAAfiG,CALcA,CFrHjBxG,CE6HAyG,mDAAAA,QAAuBA,CAC3BxG,CAD2BwG,CAE3BvG,CAF2BuG,CAENA,CAGrBA,MAAMC,EACJxG,CAAUa,CAAAA,WAAV0F,CAAsBxG,CAAtBwG,CAA6BA,IAA7BA,CAAmCnG,CAAAA,CAAAA,gDAAMqG,CAAAA,WAAzCF,CADIC,EACqDD,OAD3DA,CAEMG,EACJ1G,CAAUa,CAAAA,WAAV0F,CAAsBxG,CAAtBwG,CAA6BA,MAA7BA,CAAqCnG,CAAAA,CAAAA,gDAAMqG,CAAAA,WAA3CF,CADIG,EACuDH,MACvDI,EAAAA,CACJ3G,CAAUa,CAAAA,WAAV0F,CAAsBxG,CAAtBwG,CAA6BA,MAA7BA,CAAqCnG,CAAAA,CAAAA,gDAAMqG,CAAAA,WAA3CF,CADII,EACuDJ,MAE7DA,OAAOA,CADMC,CACND;AADiBA,KACjBA,CADyBG,CACzBH,CADsCA,KACtCA,CAD8CI,CAC9CJ,CAAOnG,CAAAA,CAAAA,gDAAMqG,CAAAA,WAAbF,CAVcA,CF/HjBzG,CGGA8G,yDAAAA,QAA6BA,CACjC7G,CADiC6G,CAEjC5G,CAFiC4G,CAEZA,CAGrBA,IAAIC,CAGFA,EAAAD,CAFE7G,CAAM+G,CAAAA,QAANF,CAAeA,OAAfA,CAAJA,CAEYG,MAAAH,CAAOI,MAAAJ,CAAO7G,CAAMI,CAAAA,aAANyG,CAAoBA,OAApBA,CAAPA,CAAPA,CAFZA,CAKY5G,CAAUa,CAAAA,WAAV+F,CAAsB7G,CAAtB6G,CAA6BA,OAA7BA,CAAsCxG,CAAAA,CAAAA,gDAAMuD,CAAAA,UAA5CiD,CALZA,EAKuEA,GAEvEA,KAAIK,EAASjH,CAAUoF,CAAAA,eAAVwB,CAA0B7G,CAA1B6G,CAAiCA,IAAjCA,CACbK,EAAAL,CAAS5G,CAAUkH,CAAAA,WAAVN,CAAsBK,CAAtBL,CAA8B7G,CAA9B6G,CACL1G,EAAAA,CAAO0G,EACXA,OAAMO,EAAUnH,CAAUsD,CAAAA,OAASC,CAAAA,eAAnBqD,CACdA,OADcA,CAEdpD,CAAAA,CAAAA,qCAASC,CAAAA,QAFKmD,CAIhBA,KAAIQ,EAASP,CACRA,EAAQzD,CAAAA,KAARwD,CAAcA,OAAdA,CAALA,EAA4CS,CAAAA,CAAAA,4CAAZT,CAAqBC,CAArBD,CAAhCA;CACEQ,CAIAR,CAJS5G,CAAUsD,CAAAA,OAASC,CAAAA,eAAnBqD,CACPA,YADOA,CAEPpD,CAAAA,CAAAA,qCAASC,CAAAA,QAFFmD,CAITA,CAAA1G,CAAA0G,EAAQA,MAARA,CAAiBQ,CAAjBR,CAA0BA,KAA1BA,CAAkCC,CAAlCD,CAA4CA,KAL9CA,CAmBAA,OAZA1G,EAYA0G,EAXEA,WAWFA,CAVEO,CAUFP,CATEA,QASFA,CAREO,CAQFP,CAPEA,KAOFA,CANEQ,CAMFR,CALEA,IAKFA,CAJEO,CAIFP,CAHEA,SAGFA,CAFEK,CAEFL,CADEA,KACFA,CAtCqBA,CHLjB9G,CGgDAwH,yDAAAA,QAA6BA,CACjCvH,CADiCuH,CAEjCtH,CAFiCsH,CAEZA,CAGrBA,MAAMC,EAAwCD,OAAxCC,GAAQxH,CAAMI,CAAAA,aAANmH,CAAoBA,MAApBA,CACdA,KAAIxB,EACF9F,CAAUa,CAAAA,WAAVyG,CACEvH,CADFuH,CAEEA,MAFFA,CAGEC,CAAAD,CAAQlH,CAAAA,CAAAA,gDAAMqC,CAAAA,QAAd6E,CAAyBlH,CAAAA,CAAAA,gDAAMU,CAAAA,IAHjCwG,CADExB,EAKGwB,OALPA,CAMIL,EAASjH,CAAUoF,CAAAA,eAAVkC,CAA0BvH,CAA1BuH,CAAiCA,IAAjCA,CACbL,EAAAK,CAAStH,CAAUkH,CAAAA,WAAVI,CAAsBL,CAAtBK;AAA8BvH,CAA9BuH,CACLC,EAAJD,GACExB,CADFwB,CACcA,GADdA,CACoBxB,CADpBwB,CAGAA,OAAOA,SAAPA,CAAmBxB,CAAnBwB,CAA+BA,OAA/BA,CAAyCL,CAAzCK,CAAkDA,KAf7BA,CHlDjBxH,CGoEA0H,kDAAAA,QAAsBA,CAACzH,CAADyH,CAAexH,CAAfwH,CAAoCA,CAE9DA,IAAMC,EAAYzH,CAAU0H,CAAAA,eAAVF,CAA0BzH,CAAMI,CAAAA,aAANqH,CAAoBA,KAApBA,CAA1BA,CAAlBA,CACM1B,EACJ9F,CAAUa,CAAAA,WAAV2G,CAAsBzH,CAAtByH,CAA6BA,MAA7BA,CAAqCpH,CAAAA,CAAAA,gDAAMuD,CAAAA,UAA3C6D,CADI1B,EACsD0B,GAF5DA,CAGMzB,EAAY/F,CAAUa,CAAAA,WAAV2G,CAAsBzH,CAAtByH,CAA6BA,IAA7BA,CAAmCpH,CAAAA,CAAAA,gDAAMuD,CAAAA,UAAzC6D,CAAZzB,EAAoEyB,GAC1EA,OAAMG,EAAY3H,CAAUa,CAAAA,WAAV2G,CAAsBzH,CAAtByH,CAA6BA,IAA7BA,CAAmCpH,CAAAA,CAAAA,gDAAMuD,CAAAA,UAAzC6D,CAAZG,EAAoEH,GAC1EA,KAAIP,EAASjH,CAAUoF,CAAAA,eAAVoC,CAA0BzH,CAA1ByH,CAAiCA,IAAjCA,CACbP,EAAAO,CAASxH,CAAUkH,CAAAA,WAAVM,CAAsBP,CAAtBO,CAA8BzH,CAA9ByH,CAETA,IACcH,CAAAA,CAAAA,4CAAZG,CAAqB1B,CAArB0B,CADFA;AAEcH,CAAAA,CAAAA,4CAAZG,CAAqBzB,CAArByB,CAFFA,EAGcH,CAAAA,CAAAA,4CAAZG,CAAqBG,CAArBH,CAHFA,CAMQI,CAkBNJ,CAlBWR,MAAAQ,CAAO1B,CAAP0B,CAkBXA,EAlBgCR,MAAAQ,CAAOzB,CAAPyB,CAkBhCA,CAjBAtH,CAiBAsH,CAhBEA,OAgBFA,CAfEC,CAeFD,CAdEA,KAcFA,CAbE1B,CAaF0B,CAZEA,IAYFA,CAXEC,CAWFD,EAVGI,CAAAJ,CAAKA,MAALA,CAAcA,MAUjBA,EATEzB,CASFyB,CAREA,IAQFA,CAPEC,CAOFD,CANMK,CAMNL,CANaM,IAAKC,CAAAA,GAALP,CAASR,MAAAQ,CAAOG,CAAPH,CAATA,CAMbA,CAJEtH,CAIFsH,CALaA,CAAbA,GAAIK,CAAJL,CACEtH,CADFsH,EACUI,CAAAJ,CAAKA,IAALA,CAAYA,IADtBA,EAGEtH,CAHFsH,GAGWI,CAAAJ,CAAKA,MAALA,CAAcA,MAHzBA,EAGmCK,CAHnCL,CAKAA,CAAAtH,CAAAsH,EAAQA,OAARA,CAAkBP,CAAlBO,CAA2BA,KAxB7BA,KAyBOA,CACLtH,CAAAsH,CAAOA,EAEPA,KAAIQ,EAAWlC,CACVA,EAAU1C,CAAAA,KAAVoE,CAAgBA,OAAhBA,CAALA,EAA8CH,CAAAA,CAAAA,4CAAZG,CAAqB1B,CAArB0B,CAAlCA,GACEQ,CAIAR,CAJWxH,CAAUsD,CAAAA,OAASC,CAAAA,eAAnBiE,CACTC,CADSD,CACGA,QADHA,CAEThE,CAAAA,CAAAA,qCAASC,CAAAA,QAFA+D,CAIXA,CAAAtH,CAAAsH,EAAQA,MAARA,CAAiBQ,CAAjBR,CAA4BA,KAA5BA,CAAoC1B,CAApC0B,CAAgDA,KALlDA,CAOIJ,EAAAA,CAASrB,CACRA,EAAU3C,CAAAA,KAAVoE,CAAgBA,OAAhBA,CAALA,EAA8CH,CAAAA,CAAAA,4CAAZG,CAAqBzB,CAArByB,CAAlCA;CACEJ,CAIAI,CAJSxH,CAAUsD,CAAAA,OAASC,CAAAA,eAAnBiE,CACPC,CADOD,CACKA,MADLA,CAEPhE,CAAAA,CAAAA,qCAASC,CAAAA,QAFF+D,CAITA,CAAAtH,CAAAsH,EAAQA,MAARA,CAAiBJ,CAAjBI,CAA0BA,KAA1BA,CAAkCzB,CAAlCyB,CAA8CA,KALhDA,CASMS,EAAAA,CAASjI,CAAUsD,CAAAA,OAASC,CAAAA,eAAnBiE,CACbC,CADaD,CACDA,MADCA,CAEbhE,CAAAA,CAAAA,qCAASC,CAAAA,QAFI+D,CAIftH,EAAAsH,EAAQA,MAARA,CAAiBS,CAAjBT,CAA0BA,KAExBtH,EAAAsH,CADcH,CAAAA,CAAAA,4CAAZG,CAAqBG,CAArBH,CAAJA,CACEtH,CADFsH,EACUM,IAAKC,CAAAA,GAALP,CAASR,MAAAQ,CAAOG,CAAPH,CAATA,CADVA,CACwCA,KADxCA,EAGEtH,CAHFsH,EAGUA,WAHVA,CAGwBG,CAHxBH,CAGoCA,MAHpCA,CAKAtH,EAAAsH,EAAQA,MAARA,CAAiBQ,CAAjBR,CAA4BA,KAA5BA,CAAoCJ,CAApCI,CAA6CA,OAC7CtH,EAAAsH,EAAQxH,CAAUuF,CAAAA,MAAlBiC,CAA2BS,CAA3BT,CAAoCA,MAApCA,CAA6CS,CAA7CT,CAAsDA,KAEtDtH,EAAAsH,CADAtH,CACAsH,CADQA,UACRA,EAEEC,CAFFD,CAGEA,KAHFA,CAIEQ,CAJFR,CAKEA,IALFA,CAMES,CANFT,CAOEA,UAPFA,CAQEC,CARFD,CASEA,MATFA,CAUEJ,CAVFI,CAWEA,KAXFA,CAYEC,CAZFD,CAaEA,MAbFA,CAcEJ,CAdFI,CAeEA,IAfFA,CAgBEC,CAhBFD,CAiBEA,MAjBFA,CAkBES,CAlBFT,CAmBEA,OAnBFA,CAoBEP,CApBFO,CAqBEA,KArBFA,CAlCKA,CAyDPA,MAAOtH,EA5FuDsH,CHpE1D1H,CGmKAoI;AAAAA,QAA0BA,CAACnI,CAADmI,CAAelI,CAAfkI,CAAoCA,CAElEA,MAAMT,EAAYzH,CAAU0H,CAAAA,eAAVQ,CAA0BnI,CAAMI,CAAAA,aAAN+H,CAAoBA,KAApBA,CAA1BA,CAClBA,KAAMpC,EACJ9F,CAAUa,CAAAA,WAAVqH,CAAsBnI,CAAtBmI,CAA6BA,MAA7BA,CAAqC9H,CAAAA,CAAAA,gDAAMuD,CAAAA,UAA3CuE,CADIpC,EACsDoC,IAC5DA,KAAIjB,EAASjH,CAAUoF,CAAAA,eAAV8C,CAA0BnI,CAA1BmI,CAAiCA,IAAjCA,CACbjB,EAAAiB,CAASlI,CAAUkH,CAAAA,WAAVgB,CAAsBjB,CAAtBiB,CAA8BnI,CAA9BmI,CACLhI,EAAAA,CAAOgI,EAEXA,KAAI7E,EAAUyC,CACTA,EAAU1C,CAAAA,KAAV8E,CAAgBA,OAAhBA,CAALA,GACE7E,CAIA6E,CAJUlI,CAAUsD,CAAAA,OAASC,CAAAA,eAAnB2E,CACRT,CADQS,CACIA,OADJA,CAER1E,CAAAA,CAAAA,qCAASC,CAAAA,QAFDyE,CAIVA,CAAAhI,CAAAgI,EAAQA,MAARA,CAAiB7E,CAAjB6E,CAA2BA,KAA3BA,CAAmCpC,CAAnCoC,CAA+CA,KALjDA,CAOMC,EAAAA,CAAWnI,CAAUsD,CAAAA,OAASC,CAAAA,eAAnB2E,CACfT,CADeS,CACHA,QADGA,CAEf1E,CAAAA,CAAAA,qCAASC,CAAAA,QAFMyE,CAIjBjB,EAAAiB,CACElI,CAAUuF,CAAAA,MADZ2C,CAEET,CAFFS,CAGEA,KAHFA,CAIE7E,CAJF6E,CAKEA,GALFA,CAMEC,CANFD,CAOEA,MAPFA,CAQEjB,CAEFiB,OADAhI,EACAgI,EADQA,WACRA;AADsBC,CACtBD,CADiCA,MACjCA,CAD0C7E,CAC1C6E,CADoDA,OACpDA,CAD8DjB,CAC9DiB,CADuEA,KACvEA,CA/BkEA,CHnK9DpI,CGqMAsI,8DAAAA,QAAkCA,CACtCrI,CADsCqI,CAEtCpI,CAFsCoI,CAEjBA,CAGrBA,IAAIC,EAAOD,EACPpI,EAAUgF,CAAAA,gBAAdoD,GAEEC,CAFFD,EAEUpI,CAAUiF,CAAAA,QAAVmD,CAAmBpI,CAAUgF,CAAAA,gBAA7BoD,CAA+CrI,CAA/CqI,CAFVA,CAIIpI,EAAUqF,CAAAA,gBAAd+C,GAGEC,CAHFD,EAGUpI,CAAUiF,CAAAA,QAAVmD,CAAmBpI,CAAUqF,CAAAA,gBAA7B+C,CAA+CrI,CAA/CqI,CAHVA,CAKAA,IAAIpI,CAAUgF,CAAAA,gBAAdoD,CAAgCA,CAC9BA,MAAME,EAAQvI,CAAiCwI,CAAAA,eAAjCH,EACVE,EAAJF,EAAYA,CAACE,CAAKE,CAAAA,oBAAlBJ,GAIEC,CAJFD,EAIUpI,CAAUiF,CAAAA,QAAVmD,CAAmBpI,CAAUgF,CAAAA,gBAA7BoD,CAA+CE,CAA/CF,CAJVA,CAF8BA,CAShCA,OAAQrI,CAAMI,CAAAA,aAANiI,CAAoBA,MAApBA,CAARA,EACEA,KAAKA,OAALA,CACEA,MAAOC,EAAPD,CAAcA,UAChBA,MAAKA,UAALA,CACEA,MAAOC,EAAPD,CAAcA,aAJlBA,CAMAA,KAAMnF,MAAAmF,CAAMA,yBAANA,CAANA,CA5BqBA,CHvMjBtI,CIAA2I;AAAAA,QAAqBA,CACzB1I,CADyB0I,CAEzBzI,CAFyByI,CAEJA,CAGfC,CAAAA,CAAS1B,MAAAyB,CAAO1I,CAAMI,CAAAA,aAANsI,CAAoBA,KAApBA,CAAPA,CAGfA,OAAOA,CAAC1B,MAAA0B,CAAOC,CAAPD,CAADA,CADiBA,CAAV9C,EAAA+C,CAAA/C,CAAcvF,CAAAA,CAAAA,gDAAMC,CAAAA,MAApBsF,CAA6BvF,CAAAA,CAAAA,gDAAM8B,CAAAA,KAC1CuG,CANcA,CJFjB3I,CIWA6I,oDAAAA,QAAyBA,CAC7B5I,CAD6B4I,CAE7B3I,CAF6B2I,CAERA,CAWrBA,IAAMC,EARoDlD,CACxDiD,IAAOA,CAACA,KAADA,CAAQvI,CAAAA,CAAAA,gDAAMqC,CAAAA,QAAdkG,CADiDjD,CAExDiD,MAASA,CAACA,KAADA,CAAQvI,CAAAA,CAAAA,gDAAMqC,CAAAA,QAAdkG,CAF+CjD,CAGxDiD,SAAYA,CAACA,KAADA,CAAQvI,CAAAA,CAAAA,gDAAMyI,CAAAA,cAAdF,CAH4CjD,CAIxDiD,OAAUA,CAACA,KAADA;AAAQvI,CAAAA,CAAAA,gDAAMyI,CAAAA,cAAdF,CAJ8CjD,CAKxDiD,MAASA,CAACA,IAADA,CAAOvI,CAAAA,CAAAA,gDAAMU,CAAAA,IAAb6H,CAL+CjD,CAQ5CiD,CAAU5I,CAAMI,CAAAA,aAANwI,CAAoBA,IAApBA,CAAVA,CACdA,OAAMvG,EAAWwG,CAAAD,CAAMA,CAANA,CACXhD,EAAAA,CAAQiD,CAAAD,CAAMA,CAANA,CACdA,OAAM7C,EAAY9F,CAAUa,CAAAA,WAAV8H,CAAsB5I,CAAtB4I,CAA6BA,GAA7BA,CAAkChD,CAAlCgD,CAAZ7C,EAAwD6C,GACxD5C,EAAAA,CAAY/F,CAAUa,CAAAA,WAAV8H,CAAsB5I,CAAtB4I,CAA6BA,GAA7BA,CAAkChD,CAAlCgD,CAAZ5C,EAAwD4C,GAG9DA,OAAKvG,EAALuG,CAKOA,CADA7C,CACA6C,CADYvG,CACZuG,CADuB5C,CACvB4C,CAAOhD,CAAPgD,CALPA,CAESA,CADAA,MACAA,CADS7C,CACT6C,CADqBA,IACrBA,CAD4B5C,CAC5B4C,CADwCA,GACxCA,CAAOvI,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbiI,CApBYA,CJbjB7I,CIuCAgJ,gDAAAA,QAAqBA,CACzB/I,CADyB+I,CAEzB9I,CAFyB8I,CAEJA,CAGrBA,MAAM1G,EAAWrC,CAAMI,CAAAA,aAAN2I,CAAoBA,IAApBA,CACjBA,KAAI5I,CAEJ4I,IAAiBA,KAAjBA,GAAI1G,CAAJ0G,CAQEA,MANAC,EAMOD,CAND9I,CAAUa,CAAAA,WAAViI,CAAsB/I,CAAtB+I,CAA6BA,KAA7BA,CAAoC1I,CAAAA,CAAAA,gDAAM8B,CAAAA,KAA1C4G,CAMCA;AANmDA,GAMnDA,CALQA,GAKRA,GALHC,CAAAD,CAAIA,CAAJA,CAKGA,GAHLC,CAGKD,CAHCA,GAGDA,CAHOC,CAGPD,EAAAA,CADAA,GACAA,CADMC,CACND,CAAO1I,CAAAA,CAAAA,gDAAM8B,CAAAA,KAAb4G,CAGPC,EAAAD,CADeA,KAAjBA,GAAI1G,CAAJ0G,EAAuCA,KAAvCA,GAA0B1G,CAA1B0G,EAA6DA,KAA7DA,GAAgD1G,CAAhD0G,CACQ9I,CAAUa,CAAAA,WAAViI,CAAsB/I,CAAtB+I,CAA6BA,KAA7BA,CAAoC1I,CAAAA,CAAAA,gDAAMyI,CAAAA,cAA1CC,CADRA,EACqEA,GADrEA,CAGQ9I,CAAUa,CAAAA,WAAViI,CAAsB/I,CAAtB+I,CAA6BA,KAA7BA,CAAoC1I,CAAAA,CAAAA,gDAAMU,CAAAA,IAA1CgI,CAHRA,EAG2DA,GAI3DA,QAAQ1G,CAAR0G,EACEA,KAAKA,KAALA,CACE5I,CAAA4I,CAAOA,WAAPA,CAAqBC,CAArBD,CAA2BA,GAC3BA,MACFA,MAAKA,MAALA,CACE5I,CAAA4I,CAAOA,YAAPA,CAAsBC,CAAtBD,CAA4BA,GAC5BA,MACFA,MAAKA,IAALA,CACE5I,CAAA4I,CAAOA,WAAPA,CAAqBC,CAArBD,CAA2BA,GAC3BA,MACFA,MAAKA,KAALA,CACE5I,CAAA4I,CAAOA,WAAPA,CAAqBC,CAArBD,CAA2BA,GAC3BA,MACFA,MAAKA,OAALA,CACE5I,CAAA4I,CAAOA,cAAPA,CAAwBC,CAAxBD,CAA8BA,GAC9BA,MACFA;KAAKA,OAALA,CACE5I,CAAA4I,CAAOA,aAAPA,CAAuBC,CAAvBD,CAA6BA,GAC7BA,MACFA,MAAKA,SAALA,CACE5I,CAAA4I,CAAOA,YAAPA,CAAsBC,CAAtBD,CAA4BA,GAC5BA,MACFA,MAAKA,WAALA,CACE5I,CAAA4I,CAAOA,aAAPA,CAAuBC,CAAvBD,CAA6BA,GAC7BA,MACFA,MAAKA,KAALA,CACE5I,CAAA4I,CAAOA,WAAPA,CAAqBC,CAArBD,CAA2BA,mBAC3BA,MACFA,MAAKA,KAALA,CACE5I,CAAA4I,CAAOA,WAAPA,CAAqBC,CAArBD,CAA2BA,mBAC3BA,MACFA,MAAKA,KAALA,CACE5I,CAAA4I,CAAOA,WAAPA,CAAqBC,CAArBD,CAA2BA,mBAhC/BA,CAmCAA,GAAI5I,CAAJ4I,CACEA,MAAOA,CAAC5I,CAAD4I,CAAO1I,CAAAA,CAAAA,gDAAMM,CAAAA,IAAboI,CAITA,QAAQ1G,CAAR0G,EACEA,KAAKA,OAALA,CACE5I,CAAA4I,CAAOA,WAAPA,CAAqBC,CAArBD,CAA2BA,kBAC3BA,MACFA,MAAKA,MAALA,CACE5I,CAAA4I,CAAOA,YAAPA,CAAsBC,CAAtBD,CAA4BA,mBAC5BA,MACFA,MAAKA,MAALA,CACE5I,CAAA4I,CAAOA,YAAPA,CAAsBC,CAAtBD,CAA4BA,mBAC5BA;KACFA,MAAKA,MAALA,CACE5I,CAAA4I,CAAOA,YAAPA,CAAsBC,CAAtBD,CAA4BA,mBAC5BA,MACFA,SACEA,KAAM7F,MAAA6F,CAAMA,yBAANA,CAAkC1G,CAAlC0G,CAANA,CAdJA,CAgBAA,MAAOA,CAAC5I,CAAD4I,CAAO1I,CAAAA,CAAAA,gDAAMyI,CAAAA,cAAbC,CA/EcA,CJzCjBhJ,CI2HAkJ,kDAAAA,QAAuBA,CAC3BjJ,CAD2BiJ,CAE3BhJ,CAF2BgJ,CAENA,CAYrBA,MATmDC,CACjDD,GAAMA,CAACA,SAADA,CAAY5I,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAlBgH,CAD2CC,CAEjDD,EAAKA,CAACA,QAADA,CAAW5I,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAjBgH,CAF4CC,CAGjDD,aAAgBA,CAACA,wBAADA,CAA2B5I,CAAAA,CAAAA,gDAAMyI,CAAAA,cAAjCG,CAHiCC;AAIjDD,MAASA,CAACA,YAADA,CAAe5I,CAAAA,CAAAA,gDAAM4B,CAAAA,MAArBgH,CAJwCC,CAKjDD,QAAWA,CAACA,cAADA,CAAiB5I,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAvBgH,CALsCC,CAMjDD,SAAYA,CAACA,UAADA,CAAa5I,CAAAA,CAAAA,gDAAMC,CAAAA,MAAnB2I,CANqCC,CAS5CD,CAAUjJ,CAAMI,CAAAA,aAAN6I,CAAoBA,UAApBA,CAAVA,CAZcA,CJ7HjBlJ,CI4IAoJ,yDAAAA,QAA8BA,CAClCnJ,CADkCmJ,CAElClJ,CAFkCkJ,CAEbA,CAIrBA,IAAMC,EAA4DD,CAChEA,KAAQA,CAACA,YAADA,CAAe9I,CAAAA,CAAAA,gDAAMyI,CAAAA,cAArBK,CAAqC9I,CAAAA,CAAAA,gDAAMwF,CAAAA,QAA3CsD,CADwDA,CAEhEA,IAAOA,CAACA,YAADA;AAAe9I,CAAAA,CAAAA,gDAAMyI,CAAAA,cAArBK,CAAqC9I,CAAAA,CAAAA,gDAAMwF,CAAAA,QAA3CsD,CAFyDA,CAGhEA,MAASA,CAACA,YAADA,CAAe9I,CAAAA,CAAAA,gDAAMyI,CAAAA,cAArBK,CAAqC9I,CAAAA,CAAAA,gDAAMwF,CAAAA,QAA3CsD,CAHuDA,CAIhEA,SAAYA,CAACA,MAADA,CAAS9I,CAAAA,CAAAA,gDAAMyF,CAAAA,UAAfqD,CAA2B9I,CAAAA,CAAAA,gDAAMyF,CAAAA,UAAjCqD,CAJoDA,CAKhEA,SAAYA,CAACA,MAADA,CAAS9I,CAAAA,CAAAA,gDAAMyF,CAAAA,UAAfqD,CAA2B9I,CAAAA,CAAAA,gDAAMyF,CAAAA,UAAjCqD,CALoDA;AAMhEA,aAAgBA,CAACA,IAADA,CAAO9I,CAAAA,CAAAA,gDAAMyI,CAAAA,cAAbK,CAA6B9I,CAAAA,CAAAA,gDAAMwF,CAAAA,QAAnCsD,CANgDA,CAOhEA,MAASA,CAACA,IAADA,CAAO9I,CAAAA,CAAAA,gDAAMU,CAAAA,IAAboI,CAAmB9I,CAAAA,CAAAA,gDAAMM,CAAAA,IAAzBwI,CAPuDA,CAUlEA,OAAME,EAAmBrJ,CAAMI,CAAAA,aAAN+I,CAAoBA,UAApBA,CAAzBA,CACMA,CAACG,CAADH,CAASI,CAATJ,CAAqBK,CAArBL,CAAAA,CAAoCC,CAAAD,CAAWE,CAAXF,CACpCM,EAAAA,CACJxJ,CAAUa,CAAAA,WAAVqI,CAAsBnJ,CAAtBmJ,CAA6BA,iBAA7BA,CAAgDI,CAAhDJ,CADIM,EAC2DN,GAExCA,QAAzBA,GAAIE,CAAJF,CAyBEhJ,CAzBFgJ,CAEuBlJ,CAAUO,CAAAA,gBAAVC,CACnB0I,aADmB1I,CAEnB0I;WACKlJ,CAAUS,CAAAA,0BADfyI;;;;;;;;;;;;;;;;;;CAFmB1I,CAFvB0I,CAyBwBA,GAzBxBA,CAyB8BM,CAzB9BN,CAyB8CA,GAzB9CA,CA0BgCA,cAAzBA,GAAIE,CAAJF,EACCO,CAENP,CADElJ,CAAUa,CAAAA,WAAVqI,CAAsBnJ,CAAtBmJ,CAA6BA,SAA7BA,CAAwC9I,CAAAA,CAAAA,gDAAMyI,CAAAA,cAA9CK,CACFA,EADmEA,GACnEA,CAAAhJ,CAAAgJ,CAAOM,CAAPN,CAAuBA,KAAvBA,CAA+BO,CAA/BP,CAAyCA,QAHpCA,EAKLhJ,CALKgJ,CAKEM,CALFN,CAKkBG,CAEzBH,OAAOA,CAAChJ,CAADgJ,CAAOK,CAAPL,CApDcA,CJ9IjBpJ,CIqMA4J,gDAAAA,QAAqBA,CAAC3J,CAAD2J,CAAe1J,CAAf0J,CAAoCA,CAE7DA,MAAM5D,EACJ9F,CAAUa,CAAAA,WAAV6I,CAAsB3J,CAAtB2J,CAA6BA,OAA7BA,CAAsCtJ,CAAAA,CAAAA,gDAAMqC,CAAAA,QAA5CiH,CADI5D,EACqD4D,GACrDC,EAAAA,CAAU3J,CAAU0H,CAAAA,eAAVgC,CAA0B3J,CAAMI,CAAAA,aAANuJ,CAAoBA,KAApBA,CAA1BA,CAChBA,OACEC,EADFD,CAEEA,aAFFA,CAGEC,CAHFD,CAIEA,kBAJFA,CAKEC,CALFD,CAMEA,UANFA,CAOE5D,CAPF4D,CAQEA,KAb2DA,CJrMzD5J,CI2NA8J,iDAAAA,QAAsBA,CAC1B7J,CAD0B6J;AAE1B5J,CAF0B4J,CAELA,CAGrBA,IAAMC,EAAO9J,CAAMI,CAAAA,aAANyJ,CAAoBA,IAApBA,CAGbA,QAAQC,CAARD,EACEA,KAAKA,KAALA,CACE/G,CAAA+G,CAAO5J,CAAUa,CAAAA,WAAV+I,CAAsB7J,CAAtB6J,CAA6BA,MAA7BA,CAAqCxJ,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA3C4H,CAAPA,EAA6DA,IACtD/G,EAAP+G,EAAcA,4CACdA,MACFA,MAAKA,KAALA,CACE/G,CAAA+G,CAAO5J,CAAUa,CAAAA,WAAV+I,CAAsB7J,CAAtB6J,CAA6BA,MAA7BA,CAAqCxJ,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3C8I,CAAPA,EAA2DA,IAC3D1J,EAAA0J,CAAOA,uBAAPA,CAAiC/G,CAAjC+G,CAAwCA,GACxCA,MACFA,MAAKA,KAALA,CACE/G,CAAA+G,CAAO5J,CAAUa,CAAAA,WAAV+I,CAAsB7J,CAAtB6J,CAA6BA,MAA7BA,CAAqCxJ,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3C8I,CAAPA,EAA2DA,IAC3D1J,EAAA0J,CAAOA,uBAAPA,CAAiC/G,CAAjC+G,CAAwCA,GACxCA,MACFA,MAAKA,SAALA,CAEQpJ,CAAAA,CAAeR,CAAUO,CAAAA,gBAAVqJ,CACnBA,UADmBA;AAEnBA;WACG5J,CAAUS,CAAAA,0BADbmJ;;;CAFmBA,CAQrB/G,EAAA+G,CAAO5J,CAAUa,CAAAA,WAAV+I,CAAsB7J,CAAtB6J,CAA6BA,MAA7BA,CAAqCxJ,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3C8I,CAAPA,EAA2DA,IAC3D1J,EAAA0J,CAAOpJ,CAAPoJ,CAAsBA,GAAtBA,CAA4B/G,CAA5B+G,CAAmCA,GACnCA,MAEFA,MAAKA,QAALA,CAEQpJ,CAAAA,CAAeR,CAAUO,CAAAA,gBAAVqJ,CACnBA,YADmBA,CAEnBA;WACG5J,CAAUS,CAAAA,0BADbmJ;;;;;;;;;;CAFmBA,CAerB/G,EAAA+G,CAAO5J,CAAUa,CAAAA,WAAV+I,CAAsB7J,CAAtB6J,CAA6BA,MAA7BA,CAAqCxJ,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3C8I,CAAPA,EAA2DA,IAC3D1J,EAAA0J,CAAOpJ,CAAPoJ,CAAsBA,GAAtBA,CAA4B/G,CAA5B+G,CAAmCA,GACnCA,MAEFA,MAAKA,MAALA,CAIQpJ,CAAAA,CAAeR,CAAUO,CAAAA,gBAAVqJ,CACnBA,WADmBA,CAEnBA;WACG5J,CAAUS,CAAAA,0BADbmJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAFmBA,CAiCrB/G,EAAA+G,CAAO5J,CAAUa,CAAAA,WAAV+I,CAAsB7J,CAAtB6J,CAA6BA,MAA7BA,CAAqCxJ,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3C8I,CAAPA,EAA2DA,IAC3D1J,EAAA0J,CAAOpJ,CAAPoJ,CAAsBA,GAAtBA,CAA4B/G,CAA5B+G,CAAmCA,GACnCA,MAEFA,MAAKA,SAALA,CACQpJ,CAAAA,CAAeR,CAAUO,CAAAA,gBAAVqJ,CACnBA,uBADmBA,CAEnBA;WACG5J,CAAUS,CAAAA,0BADbmJ;;;;;;;;;;;CAFmBA,CAgBrB/G,EAAA+G,CAAO5J,CAAUa,CAAAA,WAAV+I,CAAsB7J,CAAtB6J,CAA6BA,MAA7BA,CAAqCxJ,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3C8I,CAAPA,EAA2DA,IAC3D1J,EAAA0J,CAAOpJ,CAAPoJ,CAAsBA,GAAtBA,CAA4B/G,CAA5B+G,CAAmCA,GACnCA,MAEFA,MAAKA,QAALA,CACQpJ,CAAAA,CAAeR,CAAUO,CAAAA,gBAAVqJ,CACnBA,gBADmBA,CAEnBA;WACG5J,CAAUS,CAAAA,0BADbmJ;;;;CAFmBA,CASrB/G,EAAA+G,CAAO5J,CAAUa,CAAAA,WAAV+I,CAAsB7J,CAAtB6J,CAA6BA,MAA7BA,CAAqCxJ,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3C8I,CAAPA,EAA2DA,IAC3D1J,EAAA0J,CAAOpJ,CAAPoJ,CAAsBA,GAAtBA,CAA4B/G,CAA5B+G,CAAmCA,GACnCA,MAEFA,SACEA,KAAM3G,MAAA2G,CAAMA,oBAANA,CAA6BC,CAA7BD,CAANA,CA7HJA,CA+HAA,MAAOA,CAAC1J,CAAD0J,CAAOxJ,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbkJ,CArIcA,CJ7NjB9J,CIqWAgK,gDAAAA,QAAqBA,CACzB/J,CADyB+J,CAEzB9J,CAFyB8J,CAEJA,CAGrBA,MAAMhE,EACJ9F,CAAUa,CAAAA,WAAViJ,CAAsB/J,CAAtB+J,CAA6BA,UAA7BA,CAAyC1J,CAAAA,CAAAA,gDAAMyI,CAAAA,cAA/CiB,CADIhE,EAC8DgE,GAC9D/D,EAAAA,CACJ/F,CAAUa,CAAAA,WAAViJ,CAAsB/J,CAAtB+J,CAA6BA,SAA7BA,CAAwC1J,CAAAA,CAAAA,gDAAMyI,CAAAA,cAA9CiB,CADI/D,EAC6D+D,GAEnEA,OAAOA,CADMhE,CACNgE;AADkBA,KAClBA,CAD0B/D,CAC1B+D,CAAO1J,CAAAA,CAAAA,gDAAMyI,CAAAA,cAAbiB,CARcA,CJvWjBhK,CIkXAiK,mDAAAA,QAAwBA,CAC5BhK,CAD4BgK,CAE5B/J,CAF4B+J,CAEPA,CAGrBA,MAAMjE,EAAY9F,CAAUa,CAAAA,WAAVkJ,CAAsBhK,CAAtBgK,CAA6BA,OAA7BA,CAAsC3J,CAAAA,CAAAA,gDAAMU,CAAAA,IAA5CiJ,CAAZjE,EAAiEiE,GAAvEA,CACMhE,EAAY/F,CAAUa,CAAAA,WAAVkJ,CAAsBhK,CAAtBgK,CAA6BA,KAA7BA,CAAoC3J,CAAAA,CAAAA,gDAAMU,CAAAA,IAA1CiJ,CAAZhE,EAA+DgE,GAC/DC,EAAAA,CACJhK,CAAUa,CAAAA,WAAVkJ,CAAsBhK,CAAtBgK,CAA6BA,MAA7BA,CAAqC3J,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3CiJ,CADIC,EACgDD,UAStDA,OAAOA,CAPLA,oBAOKA,CANLjE,CAMKiE,CALLA,IAKKA,CAJLhE,CAIKgE,CAHLA,KAGKA,CAFLC,CAEKD,CADLA,GACKA,CAAO3J,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbqJ,CAfcA,CJpXjBjK;AIsYAmK,oDAAAA,QAAyBA,CAC7BlK,CAD6BkK,CAE7BjK,CAF6BiK,CAERA,CAGrBA,MAAMnE,EAAY9F,CAAUa,CAAAA,WAAVoJ,CAAsBlK,CAAtBkK,CAA6BA,MAA7BA,CAAqC7J,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3CmJ,CAAZnE,EAAgEmE,GAChElE,EAAAA,CAAY/F,CAAUa,CAAAA,WAAVoJ,CAAsBlK,CAAtBkK,CAA6BA,IAA7BA,CAAmC7J,CAAAA,CAAAA,gDAAMU,CAAAA,IAAzCmJ,CAAZlE,EAA8DkE,GAgBpEA,OAAOA,CAfcjK,CAAUO,CAAAA,gBAAVC,CACnByJ,eADmBzJ,CAEnByJ;WACOjK,CAAUS,CAAAA,0BADjBwJ;;;;;;;;;CAFmBzJ,CAedyJ,CADqBA,GACrBA,CAD2BnE,CAC3BmE,CADuCA,IACvCA,CAD8ClE,CAC9CkE,CAD0DA,GAC1DA,CAAO7J,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbuJ,CApBcA,CJxYjBnK,CI+ZAoK,sDAAAA,QAA2BA,CAC/BnK,CAD+BmK,CAE/BlK,CAF+BkK,CAEVA,CAGrBA,MAAOA,CAACA,eAADA,CAAkB9J,CAAAA,CAAAA,gDAAMM,CAAAA,IAAxBwJ,CAHcA,CJjajBpK,CIuaAqK,+CAAAA,QAAoBA,CACxBpK,CADwBoK,CAExBnK,CAFwBmK,CAEHA,CAGrBA,MAAMrE,EAAY9F,CAAUa,CAAAA,WAAVsJ,CAAsBpK,CAAtBoK,CAA6BA,GAA7BA,CAAkC/J,CAAAA,CAAAA,gDAAMU,CAAAA,IAAxCqJ,CAAZrE,EAA6DqE,GAEnEA,OAAOA,CACLA,aADKA,EADWnK,CAAUa,CAAAA,WAAVsJ,CAAsBpK,CAAtBoK,CAA6BA,GAA7BA,CAAkC/J,CAAAA,CAAAA,gDAAMU,CAAAA,IAAxCqJ,CACXA,EAD4DA,GAC5DA,EACuBA,IADvBA,CAC8BrE,CAD9BqE,CAC0CA,mBAD1CA;AAEL/J,CAAAA,CAAAA,gDAAMyI,CAAAA,cAFDsB,CALcA,CJzajBrK,CKCAsK,+DAAAA,QAA8BA,CAClCrK,CADkCqK,CAElCpK,CAFkCoK,CAEbA,CAGrBA,MAAMC,EAAWrK,CAAUsK,CAAAA,gBAAVF,CAA2BrK,CAAMI,CAAAA,aAANiK,CAAoBA,MAApBA,CAA3BA,CACjBA,KAAIG,EAAQH,EACRpK,EAAUgF,CAAAA,gBAAdoF,GACEG,CADFH,EACWpK,CAAUiF,CAAAA,QAAVmF,CAAmBpK,CAAUgF,CAAAA,gBAA7BoF,CAA+CrK,CAA/CqK,CADXA,CAGIpK,EAAUqF,CAAAA,gBAAd+E,GACEG,CADFH,EACWpK,CAAUiF,CAAAA,QAAVmF,CAAmBpK,CAAUqF,CAAAA,gBAA7B+E,CAA+CrK,CAA/CqK,CADXA,CAGIG,EAAJH,GACEG,CADFH,CACUpK,CAAUsF,CAAAA,WAAV8E,CAAsBG,CAAtBH,CAA6BpK,CAAUuF,CAAAA,MAAvC6E,CADVA,CAGAA,KAAII,EAAWJ,EACXpK,EAAUyK,CAAAA,kBAAdL,GACEI,CADFJ,CACapK,CAAUsF,CAAAA,WAAV8E,CACTpK,CAAUiF,CAAAA,QAAVmF,CAAmBpK,CAAUyK,CAAAA,kBAA7BL,CAAiDrK,CAAjDqK,CADSA,CAETpK,CAAUuF,CAAAA,MAFD6E,CADbA,CAMAA,OAAMnD,EAASjH,CAAUoF,CAAAA,eAAVgF,CAA0BrK,CAA1BqK,CAAiCA,OAAjCA,CACfA,KAAIM,EAAc1K,CAAUa,CAAAA,WAAVuJ,CAAsBrK,CAAtBqK;AAA6BA,QAA7BA,CAAuChK,CAAAA,CAAAA,gDAAMU,CAAAA,IAA7CsJ,CAAdM,EAAoEN,EAAxEA,CACIO,EAAQP,EACRnD,EAAJmD,EAAcM,CAAdN,GAEEO,CAFFP,CAEUG,CAFVH,CAIIM,EAAJN,GACEM,CADFN,CACgBpK,CAAUuF,CAAAA,MAD1B6E,CACmCA,SADnCA,CAC+CM,CAD/CN,CAC6DA,KAD7DA,CAGAA,OAAMQ,EAAOR,EAAbA,CACMS,EAAY9K,CAAM+K,CAAAA,OAANV,EAClBA,KAAKA,IAAI1I,EAAI0I,CAAbA,CAAgB1I,CAAhB0I,CAAoBS,CAAUE,CAAAA,MAA9BX,CAAsC1I,CAAA0I,EAAtCA,CACEQ,CAAAR,CAAK1I,CAAL0I,CAAAA,CAAUA,WAAVA,CAAuBpK,CAAU0H,CAAAA,eAAV0C,CAA0BS,CAAAT,CAAU1I,CAAV0I,CAA1BA,CAErBlK,EAAAA,CACFkK,WADElK,CAEFmK,CAFEnK,CAGFkK,GAHElK,CAIF0K,CAAKjJ,CAAAA,IAALyI,CAAUA,IAAVA,CAJElK,CAKFkK,OALElK,CAMFqK,CANErK,CAOFsK,CAPEtK,CAQF+G,CARE/G,CASFyK,CATEzK,CAUFwK,CAVExK,CAWFkK,GACFlK,EAAAkK,CAAOpK,CAAUgL,CAAAA,MAAVZ,CAAiBrK,CAAjBqK,CAAwBlK,CAAxBkK,CAINpK,EAAiCiL,CAAAA,YAAjCb,CAA8CA,GAA9CA,CAAoDC,CAApDD,CAAAA,CAAgElK,CACjEkK,OAAOA,KArDcA,CLHjBtK,CK+DAoL,gEAAAA,QAA+BA,CACnCnL,CADmCmL,CAEnClL,CAFmCkL,CAEdA,CAGrBA,MAAMb,EAAWrK,CAAUsK,CAAAA,gBAAVY,CAA2BnL,CAAMI,CAAAA,aAAN+K,CAAoBA,MAApBA,CAA3BA,CAAjBA,CACMN,EAAOM,EADbA,CAEML,EAAY9K,CAAM+K,CAAAA,OAANI,EAClBA,KAAKA,IAAIxJ,EAAIwJ,CAAbA,CAAgBxJ,CAAhBwJ,CAAoBL,CAAUE,CAAAA,MAA9BG,CAAsCxJ,CAAAwJ,EAAtCA,CACEN,CAAAM,CAAKxJ,CAALwJ,CAAAA;AAAUlL,CAAUa,CAAAA,WAAVqK,CAAsBnL,CAAtBmL,CAA6BA,KAA7BA,CAAqCxJ,CAArCwJ,CAAwC9K,CAAAA,CAAAA,gDAAMU,CAAAA,IAA9CoK,CAAVA,EAAiEA,MAGnEA,OAAOA,CADMb,CACNa,CADiBA,GACjBA,CADuBN,CAAKjJ,CAAAA,IAALuJ,CAAUA,IAAVA,CACvBA,CADyCA,GACzCA,CAAO9K,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbwK,CAVcA,CLjEjBpL,CK8EAqL,kEAAAA,QAAiCA,CACrCpL,CADqCoL,CAErCnL,CAFqCmL,CAEhBA,CASrBA,MAJcnL,EAAUoL,CAAAA,QAAVD,CAAAA,qBAAAvC,CACZ7I,CADY6I,CAEZ5I,CAFY4I,CAIPuC,CAAMA,CAANA,CAAPA,CAAkBA,KATGA,CLhFjBrL,CK4FAuL,8DAAAA,QAA6BA,CACjCtL,CADiCsL,CAEjCrL,CAFiCqL,CAEZA,CAKrBA,IAAInL,EAAOmL,MAAPnL,EADFF,CAAUa,CAAAA,WAAVwK,CAAsBtL,CAAtBsL,CAA6BA,WAA7BA,CAA0CjL,CAAAA,CAAAA,gDAAMU,CAAAA,IAAhDuK,CACEnL,EADuDmL,OACvDnL,EAA4BmL,OAC5BrL;CAAUqF,CAAAA,gBAAdgG,GAGEnL,CAHFmL,EAGUrL,CAAUsF,CAAAA,WAAV+F,CACNrL,CAAUiF,CAAAA,QAAVoG,CAAmBrL,CAAUqF,CAAAA,gBAA7BgG,CAA+CtL,CAA/CsL,CADMA,CAENrL,CAAUuF,CAAAA,MAFJ8F,CAHVA,CAQKtL,EAAwBuL,CAAAA,eAA7BD,EACQ3H,CACN2H,CADcrL,CAAUa,CAAAA,WAAVwK,CAAsBtL,CAAtBsL,CAA6BA,OAA7BA,CAAsCjL,CAAAA,CAAAA,gDAAMU,CAAAA,IAA5CuK,CACdA,EADmEA,MACnEA,CAAAnL,CAAAmL,EAAQrL,CAAUuF,CAAAA,MAAlB8F,CAA2BA,SAA3BA,CAAuC3H,CAAvC2H,CAA+CA,KAFjDA,EAIEnL,CAJFmL,EAIUrL,CAAUuF,CAAAA,MAJpB8F,CAI6BA,WAG7BA,OADAnL,EACAmL,CADQA,KApBaA,CL9FjBvL,CM2CAyL,yCAAAA,QAAcA,CAClBxL,CADkBwL,CAElBvL,CAFkBuL,CAEGA,CAIrBA,MAAOA,CADMvL,CAAUC,CAAAA,MAAVC,CAAiBH,CAAMI,CAAAA,aAANoL,CAAoBA,MAApBA,CAAjBrL,CACNqL,CAAOnL,CAAAA,CAAAA,gDAAMC,CAAAA,MAAbkL,CAJcA,CN7CjBzL,CMoDA0L,mDAAAA,QAAwBA,CAC5BzL,CAD4ByL,CAE5BxL,CAF4BwL,CAEPA,CAGftL,CAAAA,CAAOF,CAAUyL,CAAAA,gBAAVD,CAA2BzL,CAAMI,CAAAA,aAANqL,CAAoBA,MAApBA,CAA3BA,CACP7F;CAAAA,CAA8B6F,CAACA,CAAvBA,GAAAtL,CAAKwL,CAAAA,OAALF,CAAaA,GAAbA,CAAAA,CAA2BpL,CAAAA,CAAAA,gDAAMqC,CAAAA,QAAjC+I,CAA4CpL,CAAAA,CAAAA,gDAAMC,CAAAA,MAChEmL,OAAOA,CAACtL,CAADsL,CAAO7F,CAAP6F,CALcA,CNtDjB1L,CM8DA6L,8CAAAA,QAAmBA,CACvB5L,CADuB4L,CAEvB3L,CAFuB2L,CAEFA,CAIrBA,OADkB5L,CACA0B,CAAAA,UAAlBkK,EACEA,KAAKA,CAALA,CACEA,MAAOA,CAACA,IAADA,CAAOvL,CAAAA,CAAAA,gDAAMC,CAAAA,MAAbsL,CACTA,MAAKA,CAALA,CAIEA,MAHM9J,EAEe+J,CADnB5L,CAAUa,CAAAA,WAAV8K,CANY5L,CAMZ4L,CAAiCA,MAAjCA,CAAyCvL,CAAAA,CAAAA,gDAAMU,CAAAA,IAA/C6K,CACmBC,EADqCD,IACrCC,CAAAC,+CAAAD,CAAY/J,CAAZ+J,CAGvBD,MAAKA,CAALA,CACEA,IAAMG,EACJ9L,CAAUa,CAAAA,WAAV8K,CAZY5L,CAYZ4L,CAAiCA,MAAjCA;AAAyCvL,CAAAA,CAAAA,gDAAMU,CAAAA,IAA/C6K,CADIG,EACoDH,IACpDI,EAAAA,CACJ/L,CAAUa,CAAAA,WAAV8K,CAdY5L,CAcZ4L,CAAiCA,MAAjCA,CAAyCvL,CAAAA,CAAAA,gDAAMU,CAAAA,IAA/C6K,CADII,EACoDJ,IAE1DA,OAAOA,CADME,+CAAAF,CAAYG,CAAZH,CAAAA,CAAsBA,CAAtBA,CACNA,CADiCA,KACjCA,CADyCE,+CAAAF,CAAYI,CAAZJ,CAAAA,CAAsBA,CAAtBA,CACzCA,CAAOvL,CAAAA,CAAAA,gDAAMqC,CAAAA,QAAbkJ,CAETA,SACQpK,CAAAA,CAAeC,KAAJmK,CAnBH5L,CAmBuB0B,CAAAA,UAApBkK,CACjBA,KAAKA,IAAIjK,EAAIiK,CAAbA,CAAgBjK,CAAhBiK,CApBc5L,CAoBgB0B,CAAAA,UAA9BkK,CAA0CjK,CAAAiK,EAA1CA,CACEpK,CAAAoK,CAASjK,CAATiK,CAAAA,CACE3L,CAAUa,CAAAA,WAAV8K,CAtBU5L,CAsBV4L,CAAiCA,KAAjCA,CAAyCjK,CAAzCiK,CAA4CvL,CAAAA,CAAAA,gDAAMU,CAAAA,IAAlD6K,CADFA,EAC6DA,IAG/DA,OAAOA,CADMA,GACNA,CADYpK,CAASI,CAAAA,IAATgK,CAAcA,GAAdA,CACZA;AADiCA,YACjCA,CAAOvL,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbiL,CAxBXA,CAJqBA,CNhEjB7L,CMiGAkM,gDAAAA,QAAqBA,CAACjM,CAADiM,CAAehM,CAAfgM,CAAoCA,CAE7DA,MAAMrC,EAAU3J,CAAU0H,CAAAA,eAAVsE,CAA0BjM,CAAMI,CAAAA,aAAN6L,CAAoBA,KAApBA,CAA1BA,CACVtI,EAAAA,CAAQ1D,CAAUa,CAAAA,WAAVmL,CAAsBjM,CAAtBiM,CAA6BA,MAA7BA,CAAqC5L,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3CkL,CAARtI,EAA4DsI,IAElEA,OADarC,EACbqC,CADuBA,MACvBA,CADgCH,+CAAAG,CAAYtI,CAAZsI,CAAAA,CAAmBA,CAAnBA,CAChCA,CADwDA,KAJKA,CNjGzDlM,CMyGAmM,gDAAAA,QAAqBA,CACzBlM,CADyBkM,CAEzBjM,CAFyBiM,CAEJA,CAIrBA,MAAOA,EADMjM,CAAUa,CAAAA,WAAVoL,CAAsBlM,CAAtBkM,CAA6BA,OAA7BA,CAAsC7L,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA5CiK,CACNA;AAD6DA,IAC7DA,EAAQA,SAARA,CAAmB7L,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAzBiK,CAJcA,CN3GjBnM,CMkHAoM,iDAAAA,QAAsBA,CAC1BnM,CAD0BmM,CAE1BlM,CAF0BkM,CAELA,CAIrBA,MAAOA,CAACA,GAADA,EADMlM,CAAUa,CAAAA,WAAVqL,CAAsBnM,CAAtBmM,CAA6BA,OAA7BA,CAAsC9L,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA5CkK,CACNA,EAD6DA,IAC7DA,EAAcA,SAAdA,CAAyB9L,CAAAA,CAAAA,gDAAM8B,CAAAA,KAA/BgK,CAJcA,CNpHjBpM,CM2HAqM,iDAAAA,QAAsBA,CAC1BpM,CAD0BoM,CAE1BnM,CAF0BmM,CAELA,CAGrBA,MAAM/J,EAC2B+J,OAA/BA,GAAApM,CAAMI,CAAAA,aAANgM,CAAoBA,KAApBA,CAAAA,CAAyCA,SAAzCA,CAAqDA,aADvDA,CAEMC,EAAYpM,CAAUa,CAAAA,WAAVsL,CAAsBpM,CAAtBoM,CAA6BA,MAA7BA,CAAqC/L,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3CqL,CAAZC;AAAgED,IAEhEjM,EAAAA,EADOF,CAAUa,CAAAA,WAAVsL,CAAsBpM,CAAtBoM,CAA6BA,OAA7BA,CAAsC/L,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA5CmK,CACPjM,EAD8DiM,IAC9DjM,EAAciM,GAAdjM,CAAoBkC,CAApBlC,CAA+BiM,GAA/BjM,CAAqCkM,CAArClM,CAAiDiM,GAEvDA,OAAIpM,EAAMuC,CAAAA,SAAUC,CAAAA,OAAQC,CAAAA,aAA5B2J,CACSA,CAACjM,CAADiM,CAAQA,MAARA,CAAgB/L,CAAAA,CAAAA,gDAAMqC,CAAAA,QAAtB0J,CADTA,CAGOA,CAACjM,CAADiM,CAAO/L,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbyL,CAZcA,CN7HjBrM,CM4IAuM,gDAAAA,QAAqBA,CACzBtM,CADyBsM,CAEzBrM,CAFyBqM,CAEJA,CAIrBA,MAAMzJ,EAAQ7C,CAAMI,CAAAA,aAANkM,CAAoBA,OAApBA,CAARzJ,EAAwCyJ,YAA9CA,CAEMd,EAAOvL,CAAUa,CAAAA,WAAVwL,CAAsBtM,CAAtBsM,CAA6BA,OAA7BA,CADeA,QAAVC,GAAA1J,CAAA0J,CAAqBlM,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3BwL,CAAkClM,CAAAA,CAAAA,gDAAM4B,CAAAA,MAC7CqK,CAAPd;AAA2Dc,IACjEA,QAAQzJ,CAARyJ,EACEA,KAAKA,OAALA,CAEEA,MAAOA,CADMd,CACNc,CADaA,YACbA,CAAOjM,CAAAA,CAAAA,gDAAMM,CAAAA,IAAb2L,CAETA,MAAKA,MAALA,CAEEA,MAAOA,CADMd,CACNc,CADaA,YACbA,CAAOjM,CAAAA,CAAAA,gDAAMM,CAAAA,IAAb2L,CAETA,MAAKA,YAALA,CAIEA,MAHMtJ,EAGCsJ,CAHIrM,CAAUgD,CAAAA,WAAVqJ,CAAsBtM,CAAtBsM,CAA6BA,IAA7BA,CAGJA,CAAAA,CADMd,CACNc,CADaA,UACbA,CAD0BtJ,CAC1BsJ,CAD+BA,GAC/BA,CAAOjM,CAAAA,CAAAA,gDAAMM,CAAAA,IAAb2L,CAETA,MAAKA,UAALA,CAGEA,MAFMtJ,EAECsJ,CAFIrM,CAAUgD,CAAAA,WAAVqJ,CAAsBtM,CAAtBsM,CAA6BA,IAA7BA,CAAmCA,CAAnCA,CAAsCA,CAAAA,CAAtCA,CAEJA,CAAAA,CADMd,CACNc,CADaA,SACbA,CADyBtJ,CACzBsJ,CAD8BA,aAC9BA,CAAOjM,CAAAA,CAAAA,gDAAMM,CAAAA,IAAb2L,CAETA,MAAKA,QAALA,CAWEA,MAAOA,CAVcrM,CAAUO,CAAAA,gBAAVC,CACnB6L,kBADmB7L;AAEnB6L;WACGrM,CAAUS,CAAAA,0BADb4L;;;;CAFmB7L,CAUd6L,CADqBA,GACrBA,CAD2Bd,CAC3Bc,CADkCA,GAClCA,CAAOjM,CAAAA,CAAAA,gDAAMM,CAAAA,IAAb2L,CA/BXA,CAkCAA,KAAMpJ,MAAAoJ,CAAMA,iCAANA,CAANA,CAzCqBA,CN9IjBvM,CM0LAyM,sDAAAA,QAA2BA,CAC/BxM,CAD+BwM,CAE/BvM,CAF+BuM,CAEVA,CAGrBA,IAAMzI,EAAkByI,CACtBA,MAASA,OADaA,CAEtBA,KAAQA,MAFcA,CAGtBA,WAAcA,WAHQA,CAItBA,SAAYA,SAJUA,CAQxBA,OAAMxI,EAAShE,CAAMI,CAAAA,aAANoM,CAAoBA,QAApBA,CAAfA,CACMvI,EAASjE,CAAMI,CAAAA,aAANoM,CAAoBA,QAApBA,CACfA,KAAMC,EACOD,UADPC,GACJzI,CADIyI,EAEOD,MAFPC,GAEJzI,CAFIyI,EAGOD,UAHPC,GAGJxI,CAHIwI,EAIOD,MAJPC,GAIJxI,CAJFuI,CAMMhB,EAAOvL,CAAUa,CAAAA,WAAV0L,CAAsBxM,CAAtBwM,CAA6BA,QAA7BA,CADKC,CAAAF,CAAqBlM,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA3BsK,CAAoClM,CAAAA,CAAAA,gDAAMU,CAAAA,IAC/CyL,CAAPhB;AAA4DgB,IAElEA,IAAeA,OAAfA,GAAIxI,CAAJwI,EAAqCA,MAArCA,GAA0BvI,CAA1BuI,CAEEA,MAAOA,CADAhB,CACAgB,CAAOnM,CAAAA,CAAAA,gDAAMU,CAAAA,IAAbyL,CACFA,IAAIhB,CAAKnI,CAAAA,KAALmJ,CAAWA,WAAXA,CAAJA,EAA+BC,CAA/BD,CAAmDA,CAIxDA,OAAQxI,CAARwI,EACEA,KAAKA,YAALA,CACEtI,CAAAsI,CAAMvM,CAAUgD,CAAAA,WAAVuJ,CAAsBxM,CAAtBwM,CAA6BA,KAA7BA,CACNA,MACFA,MAAKA,UAALA,CACEtI,CAAAsI,CAAMvM,CAAUgD,CAAAA,WAAVuJ,CAAsBxM,CAAtBwM,CAA6BA,KAA7BA,CAAoCA,CAApCA,CAAuCA,CAAAA,CAAvCA,CAA8CnM,CAAAA,CAAAA,gDAAMqC,CAAAA,QAApD8J,CACNtI,EAAAsI,CAAMhB,CAANgB,CAAaA,YAAbA,CAA4BtI,CAC5BsI,MACFA,MAAKA,OAALA,CACEtI,CAAAsI,CAAMA,GACNA,MACFA,SACEA,KAAMtJ,MAAAsJ,CAAMA,uCAANA,CAANA,CAZJA,CAeAA,OAAQvI,CAARuI,EACEA,KAAKA,YAALA,CACErI,CAAAqI,CAAMvM,CAAUgD,CAAAA,WAAVuJ,CAAsBxM,CAAtBwM,CAA6BA,KAA7BA,CAAoCA,CAApCA,CACNA,MACFA,MAAKA,UAALA,CACErI,CAAAqI,CAAMvM,CAAUgD,CAAAA,WAAVuJ,CAAsBxM,CAAtBwM,CAA6BA,KAA7BA;AAAoCA,CAApCA,CAAuCA,CAAAA,CAAvCA,CAA8CnM,CAAAA,CAAAA,gDAAMqC,CAAAA,QAApD8J,CACNrI,EAAAqI,CAAMhB,CAANgB,CAAaA,YAAbA,CAA4BrI,CAC5BqI,MACFA,MAAKA,MAALA,CACErI,CAAAqI,CAAMhB,CAANgB,CAAaA,SACbA,MACFA,SACEA,KAAMtJ,MAAAsJ,CAAMA,uCAANA,CAANA,CAZJA,CAcArM,CAAAqM,CAAOhB,CAAPgB,CAAcA,SAAdA,CAA0BtI,CAA1BsI,CAAgCA,IAAhCA,CAAuCrI,CAAvCqI,CAA6CA,GAjCWA,CAAnDA,IAmCCtI,EAoBNsI,CApBYvM,CAAUgD,CAAAA,WAAVuJ,CAAsBxM,CAAtBwM,CAA6BA,KAA7BA,CAoBZA,CAnBMrI,CAmBNqI,CAnBYvM,CAAUgD,CAAAA,WAAVuJ,CAAsBxM,CAAtBwM,CAA6BA,KAA7BA,CAmBZA,CAAArM,CAAAqM,CAZqBvM,CAAUO,CAAAA,gBAAVC,CACnB+L,aADmB/L,CACHsD,CAAAyI,CAAgBxI,CAAhBwI,CADG/L,CACuBsD,CAAAyI,CAAgBvI,CAAhBuI,CADvB/L,CAEnB+L;WAEEvM,CAAUS,CAAAA,0BAFZ8L,YALWA,UAAXpI,GAAAJ,CAAAI,EAAoCoI,YAApCpI,GAAyBJ,CAAzBI,CAAmDoI,OAAnDpI,CAA6DoI,EAK7DA,GAHWA,UAAXnI,GAAAJ,CAAAI,EAAoCmI,YAApCnI,GAAyBJ,CAAzBI,CAAmDmI,OAAnDnI,CAA6DmI,EAG7DA;gBAIUlI,qDAAAkI,CAAkBA,UAAlBA,CAA8BxI,CAA9BwI,CAAsCA,KAAtCA,CAJVA;cAKQlI,qDAAAkI,CAAkBA,UAAlBA,CAA8BvI,CAA9BuI,CAAsCA,KAAtCA,CALRA;;;CAFmB/L,CAYrB+L,CAEEA,GAFFA,CAGEhB,CAHFgB,EAMcA,UAAXA,GAAAxI,CAAAwI,EAAoCA,YAApCA,GAAyBxI,CAAzBwI,CAAmDA,IAAnDA,CAA0DtI,CAA1DsI,CAAgEA,EANnEA,GAOcA,UAAXA,GAAAvI,CAAAuI,EAAoCA,YAApCA,GAAyBvI,CAAzBuI,CAAmDA,IAAnDA,CAA0DrI,CAA1DqI,CAAgEA,EAPnEA,EAQEA,GAEJA,OAAOA,CAACrM,CAADqM,CAAOnM,CAAAA,CAAAA,gDAAMM,CAAAA,IAAb6L,CAzFcA,CN5LjBzM,CMwRA2M,oDAAAA,QAAyBA,CAC7B1M,CAD6B0M,CAE7BzM,CAF6ByM,CAERA,CASrBA,MAAMrK,EANYsD,CAChB+G,UAAaA,gBADG/G,CAEhB+G,UAAaA,gBAFG/G,CAGhB+G,UAAaA,IAHG/G,CAMD+G,CAAU1M,CAAMI,CAAAA,aAANsM,CAAoBA,MAApBA,CAAVA,CAEXlB,EAAAA,CAAOvL,CAAUa,CAAAA,WAAV4L,CAAsB1M,CAAtB0M,CAA6BA,MAA7BA,CADKrK,CAAAkK,CAAWlM,CAAAA,CAAAA,gDAAM4B,CAAAA,MAAjBsK,CAA0BlM,CAAAA,CAAAA,gDAAMU,CAAAA,IACrC2L,CAAPlB,EAA0DkB,IAkBhEA,OAAOA,CAhBHrK,CAAJlC,CAESqL,CAFTrL,CAEgBkC,CAFhBlC;AAKuBF,CAAUO,CAAAA,gBAAVC,CACnBiM,iBADmBjM,CAEnBiM;WACKzM,CAAUS,CAAAA,0BADfgM;;;;CAFmBjM,CALvBN,CAcwBuM,GAdxBvM,CAc8BqL,CAd9BrL,CAcqCuM,GAE9BA,CAAOrM,CAAAA,CAAAA,gDAAMM,CAAAA,IAAb+L,CA7BcA,CN1RjB3M,CM0TA4M,8CAAAA,QAAmBA,CACvB3M,CADuB2M,CAEvB1M,CAFuB0M,CAEFA,CASrBA,MAAMtK,EANYsD,CAChBgH,KAAQA,8BADQhH,CAEhBgH,MAASA,8BAFOhH,CAGhBgH,KAAQA,SAHQhH,CAMDgH,CAAU3M,CAAMI,CAAAA,aAANuM,CAAoBA,MAApBA,CAAVA,CAEjBA,OAAOA,EADM1M,CAAUa,CAAAA,WAAV6L,CAAsB3M,CAAtB2M,CAA6BA,MAA7BA,CAAqCtM,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA3C0K,CACNA,EAD4DA,IAC5DA,EAAQtK,CAARsK,CAAkBtM,CAAAA,CAAAA,gDAAMM,CAAAA,IAAxBgM,CAXcA,CN5TjB5M,CM0UA6M,+CAAAA,QAAoBA,CAAC5M,CAAD4M,CAAe3M,CAAf2M,CAAoCA,CAExDC,CAAAA,CAAM5M,CAAUa,CAAAA,WAAV8L,CAAsB5M,CAAtB4M,CAA6BA,MAA7BA,CAAqCvM,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3C6L,CAANC;AAA0DD,IAE9DC,EAAAD,CAAMC,CAAIC,CAAAA,KAAJF,CAAUA,CAAVA,CAAaA,CAACA,CAAdA,CAANA,CAAyBA,KAAzBA,CAAiCC,CAAIC,CAAAA,KAAJF,CAAUA,CAACA,CAAXA,CACjCA,OAAOA,SAAPA,CAAmBC,CAAnBD,CAAwBA,MALoCA,CN1UxD7M,CMkVAgN,oDAAAA,QAAyBA,CAC7B/M,CAD6B+M,CAE7B9M,CAF6B8M,CAERA,CAWjB5M,CAAAA,CAAO4M,gBAAP5M,EAPAH,CAAM+G,CAAAA,QAANgG,CAAeA,MAAfA,CAAJF,CAEQ5M,CAAUC,CAAAA,MAAV6M,CAAiB/M,CAAMI,CAAAA,aAAN2M,CAAoBA,MAApBA,CAAjBA,CAFRF,CAKQ5M,CAAUa,CAAAA,WAAViM,CAAsB/M,CAAtB+M,CAA6BA,MAA7BA,CAAqC1M,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3CgM,CALRF,EAK4DE,IAExD5M,EAAgC4M,GACaA,SACjDA,GADiB/M,CAAMI,CAAAA,aAAN2M,CAAoBA,MAApBA,CACjBA,GACE5M,CADF4M,CACSA,SADTA,CACqB5M,CADrB4M,CAC4BA,GAD5BA,CAGAA,OAAOA,CAAC5M,CAAD4M,CAAO1M,CAAAA,CAAAA,gDAAMM,CAAAA,IAAboM,CAhBcA,CNpVjBhN,CMyWAiN,+CAAAA,QAAoBA,CACxBhN,CADwBgN,CAExB/M,CAFwB+M,CAEHA,CAErBA,MAAMxB,EAAOvL,CAAUa,CAAAA,WAAVkM,CAAsBhN,CAAtBgN;AAA6BA,MAA7BA,CAAqC3M,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3CiM,CAAPxB,EAA2DwB,IAC3DC,EAAAA,CAAMhN,CAAUa,CAAAA,WAAVkM,CAAsBhN,CAAtBgN,CAA6BA,KAA7BA,CAAoC3M,CAAAA,CAAAA,gDAAMU,CAAAA,IAA1CiM,CAANC,EAAyDD,IAc/DA,OAAOA,CAbc/M,CAAUO,CAAAA,gBAAVC,CACnBuM,WADmBvM,CAEnBuM;WACO/M,CAAUS,CAAAA,0BADjBsM;;;;;;;CAFmBvM,CAaduM,CADqBA,GACrBA,CAD2BxB,CAC3BwB,CADkCA,IAClCA,CADyCC,CACzCD,CAD+CA,GAC/CA,CAAO3M,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbqM,CAjBcA,CN3WjBjN,CM+XAmN,iDAAAA,QAAsBA,CAC1BlN,CAD0BkN,CAE1BjN,CAF0BiN,CAELA,CAErBA,MAAM1B,EAAOvL,CAAUa,CAAAA,WAAVoM,CAAsBlN,CAAtBkN,CAA6BA,MAA7BA,CAAqC7M,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3CmM,CAAP1B,EAA2D0B,IAAjEA,CACMC,EAAOlN,CAAUa,CAAAA,WAAVoM,CAAsBlN,CAAtBkN,CAA6BA,MAA7BA,CAAqC7M,CAAAA,CAAAA,gDAAMU,CAAAA,IAA3CmM,CAAPC,EAA2DD,IAC3DE,EAAAA,CAAKnN,CAAUa,CAAAA,WAAVoM,CAAsBlN,CAAtBkN,CAA6BA,IAA7BA,CAAmC7M,CAAAA,CAAAA,gDAAMU,CAAAA,IAAzCmM,CAALE,EAAuDF,IAc7DA,OAAOA,CAXcjN,CAAUO,CAAAA,gBAAVC,CACnByM,aADmBzM,CAEnByM;WACOjN,CAAUS,CAAAA,0BADjBwM;;;;;CAFmBzM,CAWdyM,CADqBA,GACrBA,CAD2B1B,CAC3B0B,CADkCA,IAClCA,CADyCC,CACzCD,CADgDA,IAChDA,CADuDE,CACvDF,CAD4DA,GAC5DA,CAAO7M,CAAAA,CAAAA,gDAAMM,CAAAA,IAAbuM,CAlBcA,CNjYjBnN,CMsZAsN,iDAAAA,QAAsBA,CAC1BrN,CAD0BqN,CAE1BpN,CAF0BoN,CAELA,CAIrBA,MAAOA,EAFMpN,CAAUa,CAAAA,WAAVuM,CAAsBrN,CAAtBqN,CAA6BA,MAA7BA,CAAqChN,CAAAA,CAAAA,gDAAM4B,CAAAA,MAA3CoL,CAENA,EAF4DA,IAE5DA,EADaA,+BACbA,CAAOhN,CAAAA,CAAAA,gDAAMM,CAAAA,IAAb0M,CAJcA,CNxZjBtN,COAAuN,uDAAAA,QAAuBA,CAC3BtN,CAD2BsN,CAE3BrN,CAF2BqN,CAENA,CAIrBA,MAAOA,CADMrN,CAAU0H,CAAAA,eAAVxH,CAA0BH,CAAMI,CAAAA,aAANkN,CAAoBA,KAApBA,CAA1BnN,CACNmN,CAAOjN,CAAAA,CAAAA,gDAAMC,CAAAA,MAAbgN,CAJcA,CPFjBvN;AOSAwN,uDAAAA,QAAuBA,CAACvN,CAADuN,CAAetN,CAAfsN,CAAoCA,CAE/DA,MAAMxH,EACJ9F,CAAUa,CAAAA,WAAVyM,CAAsBvN,CAAtBuN,CAA6BA,OAA7BA,CAAsClN,CAAAA,CAAAA,gDAAMuD,CAAAA,UAA5C2J,CADIxH,EACuDwH,GAE7DA,OADgBtN,EAAU0H,CAAAA,eAAViC,CAA0B5J,CAAMI,CAAAA,aAANmN,CAAoBA,KAApBA,CAA1B3D,CAChB2D,CAAiBA,KAAjBA,CAAyBxH,CAAzBwH,CAAqCA,KAL0BA,CPT3DxN,CQRAyN,8DAAAA,QAAgCA,CAACxN,CAADwN,CAAevN,CAAfuN,CAAoCA,CAExEA,MADarN,oBAD2DqN,CRQpEzN,CQJA0N,4CAAAA,QAAcA,CAACzN,CAADyN,CAAexN,CAAfwN,CAAoCA,CAClDC,CAAAA,CAAY1N,CAAMI,CAAAA,aAANqN,CAAoBA,MAApBA,CACZE,EAAAA,CAAe3N,CAAMI,CAAAA,aAANqN,CAAoBA,SAApBA,CAEnBA,IAAIA,CAACC,CAALD,EAAkBA,CAACE,CAAnBF,CACEA,MAAOA,MAIJG,EAAAA,CAAAA,sDAAYC,CAAAA,QAAZJ,CAAqBC,CAArBD,CAALA;AACEG,CAAAA,CAAAA,sDAAYE,CAAAA,IAAZL,CAAiBC,CAAjBD,CAIFA,OADWA,OACXA,CADqBC,CACrBD,CADiCA,QACjCA,CAD4CE,CAC5CF,CAD2DA,MAbLA,CRIlD1N,CQaAgO,+CAAAA,QAAiBA,CAAC/N,CAAD+N,CAAe9N,CAAf8N,CAAoCA,CACrDL,CAAAA,CAAY1N,CAAMI,CAAAA,aAAN2N,CAAoBA,MAApBA,CAEhBA,IAAIA,CAACL,CAALK,CACEA,MAAOA,MAIJH,EAAAA,CAAAA,sDAAYC,CAAAA,QAAZE,CAAqBL,CAArBK,CAALA,EACEH,CAAAA,CAAAA,sDAAYE,CAAAA,IAAZC,CAAiBL,CAAjBK,CAIFA,OADWA,QACXA,CADsBL,CACtBK,CADkCA,KAZuBA,CRbrDhO,CQ6BAiO,sDAAAA,QAAwBA,CAAChO,CAADgO,CAAe/N,CAAf+N,CAAoCA,CAEhEA,MAAOA,CADMhO,CAAMI,CAAAA,aAAN6N,CAAoBD,MAApBC,CACND,CAAO3N,CAAAA,CAAAA,gDAAMC,CAAAA,MAAb0N,CAFyDA,CR7B5DjO;AQkCAmO,qDAAAA,QAAuBA,CAAClO,CAADkO,CAAejO,CAAfiO,CAAoCA,CAE/DA,MAAOA,CADMlO,CAAMI,CAAAA,aAAN6N,CAAoBC,MAApBD,CACNC,CAAO7N,CAAAA,CAAAA,gDAAMC,CAAAA,MAAb4N,CAFwDA,CRlC3DnO,CQuCAoO,wDAAAA,QAA0BA,CAACnO,CAADmO,CAAelO,CAAfkO,CAAoCA,CAElEA,MAAOA,CADMnO,CAAMI,CAAAA,aAAN6N,CAAoBE,MAApBF,CACNE,CAAO9N,CAAAA,CAAAA,gDAAMC,CAAAA,MAAb6N,CAF2DA,CRvC9DpO,CQ4CAqO,oDAAAA,QAAsBA,CAACpO,CAADoO,CAAenO,CAAfmO,CAAoCA,CAC9DA,IAAIC,EAAgBrO,CAAMI,CAAAA,aAANgO,CAAoBA,MAApBA,CAApBA,CACIE,EAAYtO,CAAMI,CAAAA,aAANgO,CAAoBA,MAApBA,CAEXG,EAAAA,CAAAA,+DAAqBV,CAAAA,QAArBO,CAA8BE,CAA9BF,CAALA;AACEG,CAAAA,CAAAA,+DAAqBT,CAAAA,IAArBM,CAA0BE,CAA1BF,CAKFA,OAAOA,CAFIA,SAEJA,CAFgBC,CAEhBD,CAFgCA,GAEhCA,CAFsCE,CAEtCF,CAFkDA,KAElDA,CADCnO,CAAUoF,CAAAA,eAAV+I,CAA0BpO,CAA1BoO,CAAiCA,eAAjCA,CACDA,CAAO/N,CAAAA,CAAAA,gDAAMC,CAAAA,MAAb8N,CAVuDA,CR5C1DrO,CQyDAyO,gDAAAA,QAAkBA,CAACxO,CAADwO,CAAevO,CAAfuO,CAAoCA,CAC1DA,IAAIC,EAAezO,CAAMI,CAAAA,aAANoO,CAAoBA,MAApBA,CAEnBA,IAAIA,CAACC,CAALD,CAAmBA,MAAOA,MAErBE,EAAAA,CAAAA,yDAAeb,CAAAA,QAAfW,CAAwBC,CAAxBD,CAALA,EACEE,CAAAA,CAAAA,yDAAeZ,CAAAA,IAAfU,CAAoBC,CAApBD,CAKFA,OAFWA,WAEXA,CAFyBC,CAEzBD,CAFwCA,KAExCA,CADQvO,CAAUoF,CAAAA,eAAVmJ,CAA0BxO,CAA1BwO,CAAiCA,eAAjCA,CAVkDA,CRzDtDzO;AQuEA4O,kDAAAA,QAAoBA,CAAC3O,CAAD2O,CAAe1O,CAAf0O,CAAoCA,CAC5DA,MAAMF,EAAezO,CAAMI,CAAAA,aAANuO,CAAoBA,MAApBA,CAArBA,CACMhL,EAAQ1D,CAAUa,CAAAA,WAAV6N,CAAsB3O,CAAtB2O,CAA6BA,OAA7BA,CAAsCtO,CAAAA,CAAAA,gDAAMC,CAAAA,MAA5CqO,CACdA,KAAIC,EAAYjL,CAAMqH,CAAAA,MAAlB4D,CAA2BD,CAW/BA,OAFAxO,EAEAwO,CAVcA,QAUdA,CAVyBF,CAUzBE,CAVwCA,YAUxCA,CAVuDF,CAUvDE,CATEA,GASFA,CATQC,CASRD,CAToBA,4BASpBA,EARyBF,CAQzBE,CARwCA,OAQxCA,CARkDC,CAQlDD,CAR8DA,4BAQ9DA,GAPyBF,CAOzBE,CAPwCA,GAOxCA,CAP8ChL,CAO9CgL,CAPsDA,MAOtDA,EAFQ1O,CAAUoF,CAAAA,eAAVsJ,CAA0B3O,CAA1B2O,CAAiCA,eAAjCA,CAZoDA,CRvExD5O,CQwFA8O,+CAAAA,QAAiBA,CAAC7O,CAAD6O,CAAe5O,CAAf4O,CAAoCA,CACzDA,MAAMJ,EAAezO,CAAMI,CAAAA,aAANyO,CAAoBA,MAApBA,CAArBA,CACMlL,EAAQ1D,CAAUa,CAAAA,WAAV+N,CAAsB7O,CAAtB6O,CAA6BA,OAA7BA,CAAsCxO,CAAAA,CAAAA,gDAAMC,CAAAA,MAA5CuO,CAQdA;MALWJ,EAKXI,CAL0BA,KAK1BA,CALkClL,CAKlCkL,CAL0CA,KAK1CA,CAFQ5O,CAAUoF,CAAAA,eAAVwJ,CAA0B7O,CAA1B6O,CAAiCA,eAAjCA,CARiDA,CRxFrD9O,CQqGA+O,iDAAAA,QAAmBA,CAAC9O,CAAD8O,CAAe7O,CAAf6O,CAAoCA,CAC3DA,MAAMb,EAAOjO,CAAMI,CAAAA,aAAN0O,CAAoBA,MAApBA,CACbA,KAAI3O,EAAO2O,oBAEP5H,EAAAA,CAASjH,CAAUoF,CAAAA,eAAVyJ,CAA0B9O,CAA1B8O,CAAiCA,QAAjCA,CAERC,EAAAA,CAAAA,4DAAkBlB,CAAAA,QAAlBiB,CAA2Bb,CAA3Ba,CAALA,EACEC,CAAAA,CAAAA,4DAAkBjB,CAAAA,IAAlBgB,CAAuBb,CAAvBa,CAGF5H,EAAA4H,CAAS7O,CAAUsF,CAAAA,WAAVuJ,CAAsB5H,CAAtB4H,CAA8BA,IAA9BA,CAAoCE,CAAAA,OAApCF,CAA4CA,MAA5CA,CAAoDA,EAApDA,CAMTA,OAJA3O,EAIA2O,CAJQ5H,CAIR4H,EAFQA,MAERA,CAFiBb,CAEjBa,CAFwBA,KAExBA,CAhB2DA,CRrGvD/O,CQwHAkP,kEAAAA,QAAoCA,CAACjP,CAADiP;AAAehP,CAAfgP,CAAoCA,CAE5EA,MAAOA,CADM9O,EACN8O,CAAO5O,CAAAA,CAAAA,gDAAMC,CAAAA,MAAb2O,CAFqEA,CRxHxElP,CAhBNmP,qCAAA,EAqEgBhO,qCAAAA,CAAAA,YAAAA,CAAAA,kDArDAnB,qCAAAA,CAAAA,aAAAA,CAAAA,mDASAQ,qCAAAA,CAAAA,aAAAA,CAAAA,mDAkBAK,qCAAAA,CAAAA,UAAAA,CAAAA,gD,CCiPhB,IAAM0D,uDAAoBA,QAAA,CACxB6K,CADwB,CAExBtM,CAFwB,CAGxBuM,CAHwB,CAGT,CAEf,MAAc,OAAd,GAAIvM,CAAJ,CACS,GADT,CAEqB,UAAd,GAAIA,CAAJ,CACEsM,CADF,CACa,gBADb,CACgCC,CADhC,CAEc,MAAd,GAAIvM,CAAJ,CACEsM,CADF,CACa,aADb,CAGEC,CATM,CAHjB,CA5RAF,oCAAA,EAkBgB5N,oCAAAA,CAAAA,kBAAAA,CAAAA,uDAQAC,oCAAAA,CAAAA,iBAAAA,CAAAA,sDAuEAoB,oCAAAA,CAAAA,cAAAA,CAAAA,mDA2MAmB;mCAAAA,CAAAA,gBAAAA,CAAAA,qDA3NA1B,oCAAAA,CAAAA,aAAAA,CAAAA,kDATAF,oCAAAA,CAAAA,aAAAA,CAAAA,kDATAF,oCAAAA,CAAAA,YAAAA,CAAAA,iDAvBAH,oCAAAA,CAAAA,YAAAA,CAAAA,iDA+ZAiD;mCAAAA,CAAAA,aAAAA,CAAAA,kDAhRA3B,oCAAAA,CAAAA,cAAAA,CAAAA,mDA+MAoB,oCAAAA,CAAAA,UAAAA,CAAAA,+CAuCAI,oCAAAA,CAAAA,WAAAA,CAAAA,gD,CClXT,IAAM0K,qDAAkBtK,gDAAxB,CA3DPmK,oCAAA,EAgBgBnK,oCAAAA,CAAAA,WAAAA,CAAAA,gDA2CHsK,oCAAAA,CAAAA,eAAAA,CAAAA,gDA+DG/I,oCAAAA,CAAAA,aAAAA,CAAAA,kDA7DAZ,oCAAAA,CAAAA,aAAAA,CAAAA,kDAkDAW;mCAAAA,CAAAA,YAAAA,CAAAA,iDAoBAE,oCAAAA,CAAAA,UAAAA,CAAAA,+CA/CAN,oCAAAA,CAAAA,eAAAA,CAAAA,oDAyDAO,oCAAAA,CAAAA,aAAAA,CAAAA,kD,CC/ET,IAAM8I,qDAAkBzI,wDAAxB,CA9DPqI,oCAAA,EAqNgB7G,oCAAAA,CAAAA,wBAAAA,CAAAA,6DAjIAZ,oCAAAA,CAAAA,YAAAA,CAAAA,iDA+FAU,oCAAAA,CAAAA,gBAAAA,CAAAA,qDArHHmH;mCAAAA,CAAAA,eAAAA,CAAAA,wDA3CGzI,oCAAAA,CAAAA,mBAAAA,CAAAA,wDA6CAU,oCAAAA,CAAAA,mBAAAA,CAAAA,wD,CCuKT,IAAMgI,+CAAaxG,+CAAnB,CAEMyG,8CAAYzG,+CAFlB,CAvOPmG,mCAAA,EA2BgBtG,mCAAAA,CAAAA,eAAAA,CAAAA,mDA4ZAwB,mCAAAA,CAAAA,UAAAA,CAAAA,8CAlOAT,mCAAAA,CAAAA,WAAAA,CAAAA,+CA1EAV;kCAAAA,CAAAA,aAAAA,CAAAA,iDAuPAe,mCAAAA,CAAAA,cAAAA,CAAAA,kDAbAD,mCAAAA,CAAAA,WAAAA,CAAAA,+CArWArB,mCAAAA,CAAAA,WAAAA,CAAAA,+CA4IAS,mCAAAA,CAAAA,oBAAAA,CAAAA,wDA+EAU;kCAAAA,CAAAA,YAAAA,CAAAA,gDAoMAM,mCAAAA,CAAAA,iBAAAA,CAAAA,qDAzBAD,mCAAAA,CAAAA,eAAAA,CAAAA,mDA/KHqF,mCAAAA,CAAAA,UAAAA,CAAAA,+CAhLGxG,mCAAAA,CAAAA,WAAAA,CAAAA,+CAkLHyG;kCAAAA,CAAAA,SAAAA,CAAAA,+C,CC5JN,IAAMC,iEAAyBpF,8DAA/B,CA7EP6E,yCAAA,EA8FgB9D,yCAAAA,CAAAA,uBAAAA,CAAAA,iEAfAD,yCAAAA,CAAAA,qBAAAA,CAAAA,+DAFHsE,yCAAAA,CAAAA,sBAAAA,CAAAA,8DA5DGpF;wCAAAA,CAAAA,oBAAAA,CAAAA,8DA2FAiB,yCAAAA,CAAAA,mBAAAA,CAAAA,6D,CCxFhB,IAAMoE,8CAAY,uBAAlB,CASM5D,gDAAcA,QAAA,CAAUnI,CAAV,CAAuB,CACzC,MAAI+L,8CAAUC,CAAAA,IAAV,CAAehM,CAAf,CAAJ,CACS,CAACA,CAAD,CAAQtD,CAAAA,CAAAA,gDAAMC,CAAAA,MAAd,CADT,CAGO,CAAC,SAAD,CAAaqD,CAAb,CAAqB,GAArB,CAA0BtD,CAAAA,CAAAA,gDAAMM,CAAAA,IAAhC,CAJkC,CAT3C,CAuBM2D,sDAAoBA,QAAA,CACxBsL,CADwB,CAExB/M,CAFwB,CAGxBuM,CAHwB,CAGT,CAEf,MAAc,OAAd,GAAIvM,CAAJ,CACS,GADT,CAEqB,UAAd,GAAIA,CAAJ,CACE+M,CADF,CACe,gBADf,CACkCR,CADlC,CAEc,MAAd,GAAIvM,CAAJ,CACE+M,CADF,CACe,aADf,CAGER,CATM,CA1BjB,CAmWaS;AAAc9C,mDAnW3B,CApBAmC,mCAAA,EA2DgB1D,mCAAAA,CAAAA,IAAAA,CAAAA,wCAsDAS,mCAAAA,CAAAA,WAAAA,CAAAA,+CAuLAS,mCAAAA,CAAAA,eAAAA,CAAAA,mDA5IAJ,mCAAAA,CAAAA,WAAAA,CAAAA,+CA6NAU;kCAAAA,CAAAA,UAAAA,CAAAA,8CA/KAR,mCAAAA,CAAAA,iBAAAA,CAAAA,qDA/DAJ,mCAAAA,CAAAA,YAAAA,CAAAA,gDATAD,mCAAAA,CAAAA,YAAAA,CAAAA,gDApDAP,mCAAAA,CAAAA,SAAAA,CAAAA,6CA2CAM;kCAAAA,CAAAA,WAAAA,CAAAA,+CArDAT,mCAAAA,CAAAA,cAAAA,CAAAA,kDAsRAmB,mCAAAA,CAAAA,UAAAA,CAAAA,8CA6BHiD,mCAAAA,CAAAA,WAAAA,CAAAA,mDArBG9C,mCAAAA,CAAAA,eAAAA,CAAAA,mDA6CAG;kCAAAA,CAAAA,YAAAA,CAAAA,gDAuBAG,mCAAAA,CAAAA,YAAAA,CAAAA,gDA5FAV,mCAAAA,CAAAA,SAAAA,CAAAA,6C,CC1UhB,IAAAuC,wCAAA,EAgBgB5B,wCAAAA,CAAAA,aAAAA,CAAAA,sDASAC,wCAAAA,CAAAA,aAAAA,CAAAA,sD,CEzBhB,IAAA2B,gDAAA,EAcE5B,gDAAAA,CAAAA,qBAAAA,CAAAA,sDACAC,gDAAAA,CAAAA,qBAAAA,CAAAA,sD,CDXF,IAAA2B,sCAAA,EAwDgBd,sCAAAA,CAAAA,YAAAA,CAAAA,mDAhDAX,sCAAAA,CAAAA,IAAAA,CAAAA,2CA2CAU,sCAAAA,CAAAA,gBAAAA,CAAAA,uDA/CAX,sCAAAA,CAAAA,sBAAAA,CAAAA,6DAqCAQ;qCAAAA,CAAAA,cAAAA,CAAAA,qDAKAE,sCAAAA,CAAAA,aAAAA,CAAAA,oDAsFAe,sCAAAA,CAAAA,0BAAAA,CAAAA,iEAhCAJ,sCAAAA,CAAAA,OAAAA,CAAAA,8CA3EAd,sCAAAA,CAAAA,OAAAA,CAAAA,8CA0DAY;qCAAAA,CAAAA,UAAAA,CAAAA,iDA8BAG,sCAAAA,CAAAA,SAAAA,CAAAA,gDA5CAN,sCAAAA,CAAAA,QAAAA,CAAAA,+C,CE1CT,IAAMsB,0CAAa,IAAIC,CAAAA,CAAAA,qDAAvB,CAGDC,0CAAyC,MAAA,CAAA,MAAA,CAAA,EAAA,CAC1CC,oCAD0C,CAE1CC,mCAF0C,CAG1CC,mCAH0C,CAI1CC,mCAJ0C,CAK1CC,kCAL0C,CAM1CC,wCAN0C,CAO1C9E,kCAP0C,CAQ1CV,uCAR0C,CAS1CyF,+CAT0C;AAU1CC,qCAV0C,CAY/C,KAAK,MAAMvC,CAAX,GAAmB+B,0CAAnB,CACEF,yCAAWzE,CAAAA,QAAX,CAAoB4C,CAApB,CAAA,CAA4B+B,yCAAA,CAAW/B,CAAX,CA/C9B,KAAAiB,8BAAA,EAyBA,8BAAA,CAAA,UAAA,CAAA,CAAA,CAAA,qDAAA,8BAAA,CAAA,KAAA,CAAA,CAAA,CAAA,gDAMaY,8BAAAA,CAAAA,UAAAA,CAAAA,yCANb;6BAAA,CAAA,WAAA,CAAA,CAAA,CAAA,sDAAA,8BAAA,CAAA,iBAAA,CAAA,CAAA,CAAA,4DAAA,8BAAA,CAAA,oBAAA,CAAA,CAAA,CAAA,+DAAA,8BAAA,CAAA,cAAA,CAAA,CAAA,CAAA","file":"c_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for colour blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.colour\n\nimport type {Block} from '../../core/block.js';\nimport type {CGenerator} from './c_generator.js';\nimport {Order} from './c_generator.js';\n\nexport function colour_picker(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Colour picker.\n  const code = generator.quote_(block.getFieldValue('COLOUR'));\n  return [code, Order.ATOMIC];\n}\n\nexport function colour_random(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Generate a random colour.\n  const functionName = generator.provideFunction_(\n    'colourRandom',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}() {\n  var num = Math.floor(Math.random() * Math.pow(2, 24));\n  return '#' + ('00000' + num.toString(16)).substr(-6);\n}\n`,\n  );\n  const code = functionName + '()';\n  return [code, Order.CALL];\n}\n\nexport function colour_rgb(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Compose a colour from RGB components expressed as percentages.\n  const red = generator.valueToCode(block, 'RED', Order.NONE) || 0;\n  const green = generator.valueToCode(block, 'GREEN', Order.NONE) || 0;\n  const blue = generator.valueToCode(block, 'BLUE', Order.NONE) || 0;\n  const functionName = generator.provideFunction_(\n    'colourRgb',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(r, g, b) {\n  r = Math.max(Math.min(Number(r), 100), 0) * 2.55;\n  g = Math.max(Math.min(Number(g), 100), 0) * 2.55;\n  b = Math.max(Math.min(Number(b), 100), 0) * 2.55;\n  r = ('0' + (Math.round(r) || 0).toString(16)).slice(-2);\n  g = ('0' + (Math.round(g) || 0).toString(16)).slice(-2);\n  b = ('0' + (Math.round(b) || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`,\n  );\n  const code = functionName + '(' + red + ', ' + green + ', ' + blue + ')';\n  return [code, Order.CALL];\n}\n\nexport function colour_blend(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Blend two colours together.\n  const c1 = generator.valueToCode(block, 'COLOUR1', Order.NONE) || \"'#000000'\";\n  const c2 = generator.valueToCode(block, 'COLOUR2', Order.NONE) || \"'#000000'\";\n  const ratio = generator.valueToCode(block, 'RATIO', Order.NONE) || 0.5;\n  const functionName = generator.provideFunction_(\n    'colourBlend',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(c1, c2, ratio) {\n  ratio = Math.max(Math.min(Number(ratio), 1), 0);\n  var r1 = parseInt(c1.substring(1, 3), 16);\n  var g1 = parseInt(c1.substring(3, 5), 16);\n  var b1 = parseInt(c1.substring(5, 7), 16);\n  var r2 = parseInt(c2.substring(1, 3), 16);\n  var g2 = parseInt(c2.substring(3, 5), 16);\n  var b2 = parseInt(c2.substring(5, 7), 16);\n  var r = Math.round(r1 * (1 - ratio) + r2 * ratio);\n  var g = Math.round(g1 * (1 - ratio) + g2 * ratio);\n  var b = Math.round(b1 * (1 - ratio) + b2 * ratio);\n  r = ('0' + (r || 0).toString(16)).slice(-2);\n  g = ('0' + (g || 0).toString(16)).slice(-2);\n  b = ('0' + (b || 0).toString(16)).slice(-2);\n  return '#' + r + g + b;\n}\n`,\n  );\n  const code = functionName + '(' + c1 + ', ' + c2 + ', ' + ratio + ')';\n  return [code, Order.CALL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for list blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.lists\n\nimport type {Block} from '../../core/block.js';\nimport type {CreateWithBlock} from '../../blocks/lists.js';\nimport type {CGenerator} from './c_generator.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './c_generator.js';\n\nexport function lists_create_empty(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Create an empty list.\n  return ['[]', Order.ATOMIC];\n}\n\nexport function lists_create_with(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Create a list with any number of elements of any type.\n  const createWithBlock = block as CreateWithBlock;\n  const elements = new Array(createWithBlock.itemCount_);\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\n    elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || 'null';\n  }\n  const code = '[' + elements.join(', ') + ']';\n  return [code, Order.ATOMIC];\n}\n\nexport function lists_repeat(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Create a list with one element repeated.\n  const functionName = generator.provideFunction_(\n    'listsRepeat',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(value, n) {\n  var array = [];\n  for (var i = 0; i < n; i++) {\n    array[i] = value;\n  }\n  return array;\n}\n`,\n  );\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'null';\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Order.CALL];\n}\n\nexport function lists_length(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // String or array length.\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  return [list + '.length', Order.MEMBER];\n}\n\nexport function lists_isEmpty(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  return ['!' + list + '.length', Order.UNARY];\n}\n\nexport function lists_indexOf(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Find an item in the list.\n  const operator =\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const list = generator.valueToCode(block, 'VALUE', Order.MEMBER) || '[]';\n  const code = list + '.' + operator + '(' + item + ')';\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITION];\n  }\n  return [code, Order.CALL];\n}\n\nexport function lists_getIndex(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] | string {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const listOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\n  const list = generator.valueToCode(block, 'VALUE', listOrder) || '[]';\n\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'GET') {\n        const code = list + '[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.shift()';\n        return [code, Order.MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.shift();\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'GET') {\n        const code = list + '.slice(-1)[0]';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.pop()';\n        return [code, Order.MEMBER];\n      } else if (mode === 'REMOVE') {\n        return list + '.pop();\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'GET') {\n        const code = list + '[' + at + ']';\n        return [code, Order.MEMBER];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, Order.CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      if (mode === 'GET') {\n        const code = list + '.slice(' + at + ')[0]';\n        return [code, Order.CALL];\n      } else if (mode === 'GET_REMOVE') {\n        const code = list + '.splice(' + at + ', 1)[0]';\n        return [code, Order.CALL];\n      } else if (mode === 'REMOVE') {\n        return list + '.splice(' + at + ', 1);';\n      }\n      break;\n    }\n    case 'RANDOM': {\n      const functionName = generator.provideFunction_(\n        'listsGetRandomItem',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, remove) {\n  var x = Math.floor(Math.random() * list.length);\n  if (remove) {\n    return list.splice(x, 1)[0];\n  } else {\n    return list[x];\n  }\n}\n`,\n      );\n      const code = functionName + '(' + list + ', ' + (mode !== 'GET') + ')';\n      if (mode === 'GET' || mode === 'GET_REMOVE') {\n        return [code, Order.CALL];\n      } else if (mode === 'REMOVE') {\n        return code + ';\\n';\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_getIndex).');\n}\n\nexport function lists_setIndex(block: Block, generator: CGenerator) {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const value = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || 'null';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  // Closure, which accesses and modifies 'list'.\n  function cacheList() {\n    if (list.match(/^\\w+$/)) {\n      return '';\n    }\n    const listVar = generator.nameDB_!.getDistinctName(\n      'tmpList',\n      NameType.VARIABLE,\n    )!;\n    const code = 'var ' + listVar + ' = ' + list + ';\\n';\n    list = listVar;\n    return code;\n  }\n  switch (where) {\n    case 'FIRST':\n      if (mode === 'SET') {\n        return list + '[0] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.unshift(' + value + ');\\n';\n      }\n      break;\n    case 'LAST':\n      if (mode === 'SET') {\n        let code = cacheList();\n        code += list + '[' + list + '.length - 1] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        return list + '.push(' + value + ');\\n';\n      }\n      break;\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      if (mode === 'SET') {\n        return list + '[' + at + '] = ' + value + ';\\n';\n      } else if (mode === 'INSERT') {\n        return list + '.splice(' + at + ', 0, ' + value + ');\\n';\n      }\n      break;\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(\n        block,\n        'AT',\n        1,\n        false,\n        Order.ADDITION,\n      );\n      let code = cacheList();\n      if (mode === 'SET') {\n        code += list + '[' + list + '.length - ' + at + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code +=\n          list +\n          '.splice(' +\n          list +\n          '.length - ' +\n          at +\n          ', 0, ' +\n          value +\n          ');\\n';\n        return code;\n      }\n      break;\n    }\n    case 'RANDOM': {\n      let code = cacheList();\n      const xVar = generator.nameDB_!.getDistinctName(\n        'tmpX',\n        NameType.VARIABLE,\n      );\n      code +=\n        'var ' + xVar + ' = Math.floor(Math.random() * ' + list + '.length);\\n';\n      if (mode === 'SET') {\n        code += list + '[' + xVar + '] = ' + value + ';\\n';\n        return code;\n      } else if (mode === 'INSERT') {\n        code += list + '.splice(' + xVar + ', 0, ' + value + ');\\n';\n        return code;\n      }\n      break;\n    }\n  }\n  throw Error('Unhandled combination (lists_setIndex).');\n}\n\n/**\n * Returns an expression calculating the index into a list.\n * @param listName Name of the list, used to calculate length.\n * @param where The method of indexing, selected by dropdown in Blockly\n * @param opt_at The optional offset when indexing from start/end.\n * @returns Index expression.\n */\nconst getSubstringIndex = function (\n  listName: string,\n  where: string,\n  opt_at?: string,\n): string | undefined {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return listName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return listName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function lists_getSublist(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Get sublist.\n  // Dictionary of WHEREn field choices and their CamelCase equivalents.\n  const wherePascalCase = {\n    'FIRST': 'First',\n    'LAST': 'Last',\n    'FROM_START': 'FromStart',\n    'FROM_END': 'FromEnd',\n  };\n  type WhereOption = keyof typeof wherePascalCase;\n  const list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n  const where1 = block.getFieldValue('WHERE1') as WhereOption;\n  const where2 = block.getFieldValue('WHERE2') as WhereOption;\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = list + '.slice(0)';\n  } else if (\n    list.match(/^\\w+$/) ||\n    (where1 !== 'FROM_END' && where2 === 'FROM_START')\n  ) {\n    // If the list is a variable or doesn't require a call for length, don't\n    // generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.ADDITION);\n        at1 = list + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.ADDITION);\n        at2 = list + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = list + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (lists_getSublist).');\n    }\n    code = list + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n      where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '';\n    const at2Param =\n      where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '';\n    const functionName = generator.provideFunction_(\n      'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\n      `\nfunction ${\n        generator.FUNCTION_NAME_PLACEHOLDER_\n      }(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`,\n    );\n    code =\n      functionName +\n      '(' +\n      list +\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n      // pass it.\n      (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', ' + at1 : '') +\n      (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', ' + at2 : '') +\n      ')';\n  }\n  return [code, Order.CALL];\n}\n\nexport function lists_sort(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Block for sorting a list.\n  const list =\n    generator.valueToCode(block, 'LIST', Order.CALL) || '[]';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n  const getCompareFunctionName = generator.provideFunction_(\n    'listsGetSortCompare',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(type, direction) {\n  var compareFuncs = {\n    'NUMERIC': function(a, b) {\n        return Number(a) - Number(b); },\n    'TEXT': function(a, b) {\n        return String(a) > String(b) ? 1 : -1; },\n    'IGNORE_CASE': function(a, b) {\n        return String(a).toLowerCase() > String(b).toLowerCase() ? 1 : -1; },\n  };\n  var compare = compareFuncs[type];\n  return function(a, b) { return compare(a, b) * direction; };\n}\n      `,\n  );\n  return [\n    list +\n      '.slice().sort(' +\n      getCompareFunctionName +\n      '(\"' +\n      type +\n      '\", ' +\n      direction +\n      '))',\n    Order.CALL,\n  ];\n}\n\nexport function lists_split(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = generator.valueToCode(block, 'INPUT', Order.MEMBER);\n  const delimiter = generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = 'split';\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '[]';\n    }\n    functionName = 'join';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = input + '.' + functionName + '(' + delimiter + ')';\n  return [code, Order.CALL];\n}\n\nexport function lists_reverse(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Block for reversing a list.\n  const list =\n    generator.valueToCode(block, 'LIST', Order.CALL) || '[]';\n  const code = list + '.slice().reverse()';\n  return [code, Order.CALL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for logic blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.logic\n\nimport type {Block} from '../../core/block.js';\nimport type {CGenerator} from './c_generator.js';\nimport {Order} from './c_generator.js';\n\nexport function controls_if(block: Block, generator: CGenerator) {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\n    let branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT,\n        ) + branchCode;\n    }\n    code +=\n      (n > 0 ? ' else ' : '') +\n      'if (' +\n      conditionCode +\n      ') {\\n' +\n      branchCode +\n      '}';\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    let branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT,\n        ) + branchCode;\n    }\n    code += ' else {\\n' + branchCode + '}';\n  }\n  return code + '\\n';\n}\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Comparison operator.\n  const OPERATORS = {\n    'EQ': '==',\n    'NEQ': '!=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>=',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\n  const order =\n    operator === '==' || operator === '!=' ? Order.EQUALITY : Order.RELATIONAL;\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n}\n\nexport function logic_operation(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Operations 'and', 'or'.\n  const operator = block.getFieldValue('OP') === 'AND' ? '&&' : '||';\n  const order = operator === '&&' ? Order.LOGICAL_AND : Order.LOGICAL_OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = operator === '&&' ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n}\n\nexport function logic_negate(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Negation.\n  const order = Order.UNARY;\n  const argument0 = generator.valueToCode(block, 'BOOL', order) || 'true';\n  const code = '!' + argument0;\n  return [code, order];\n}\n\nexport function logic_boolean(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Boolean values true and false.\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n}\n\nexport function logic_null(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Null data type.\n  //将null改为NULL\n  //return ['null', Order.ATOMIC];\n  return ['NULL', Order.ATOMIC];\n}\n\nexport function logic_ternary(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Ternary operator.\n  const value_if =\n    generator.valueToCode(block, 'IF', Order.CONDITIONAL) || 'false';\n  const value_then =\n    generator.valueToCode(block, 'THEN', Order.CONDITIONAL) || 'NULL';\n  const value_else =\n    generator.valueToCode(block, 'ELSE', Order.CONDITIONAL) || 'NULL';\n  const code = value_if + ' ? ' + value_then + ' : ' + value_else;\n  return [code, Order.CONDITIONAL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for loop blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.loops\n\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {Block} from '../../core/block.js';\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\nimport type {CGenerator} from './c_generator.js';\nimport {NameType} from '../../core/names.js';\nimport {Order} from './c_generator.js';\n\nexport function controls_repeat_ext(\n  block: Block,\n  generator: CGenerator,\n) {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.ASSIGNMENT) || '0';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  const loopVar = generator.nameDB_!.getDistinctName(\n    'count',\n    NameType.VARIABLE,\n  );\n  let endVar = repeats;\n  if (!repeats.match(/^\\w+$/) && !stringUtils.isNumber(repeats)) {\n    endVar = generator.nameDB_!.getDistinctName(\n      'repeat_end',\n      NameType.VARIABLE,\n    );\n    code += 'int ' + endVar + ' = ' + repeats + ';\\n';\n  }\n  code +=\n    'for (int ' +\n    loopVar +\n    ' = 0; ' +\n    loopVar +\n    ' < ' +\n    endVar +\n    '; ' +\n    loopVar +\n    '++) {\\n' +\n    branch +\n    '}\\n';\n  return code;\n}\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(\n  block: Block,\n  generator: CGenerator,\n) {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n    generator.valueToCode(\n      block,\n      'BOOL',\n      until ? Order.ADDITION : Order.NONE,\n    ) || 'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  if (until) {\n    argument0 = '!' + argument0;\n  }\n  return 'while (' + argument0 + ') {\\n' + branch + '}\\n';\n}\n\nexport function controls_for(block: Block, generator: CGenerator) {\n  // For loop.\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n    generator.valueToCode(block, 'FROM', Order.ASSIGNMENT) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.ASSIGNMENT) || '0';\n  const increment = generator.valueToCode(block, 'BY', Order.ASSIGNMENT) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code;\n  if (\n    stringUtils.isNumber(argument0) &&\n    stringUtils.isNumber(argument1) &&\n    stringUtils.isNumber(increment)\n  ) {\n    // All arguments are simple numbers.\n    const up = Number(argument0) <= Number(argument1);\n    code =\n      'for (' +\n      variable0 +\n      ' = ' +\n      argument0 +\n      '; ' +\n      variable0 +\n      (up ? ' <= ' : ' >= ') +\n      argument1 +\n      '; ' +\n      variable0;\n    const step = Math.abs(Number(increment));\n    if (step === 1) {\n      code += up ? '++' : '--';\n    } else {\n      code += (up ? ' += ' : ' -= ') + step;\n    }\n    code += ') {\\n' + branch + '}\\n';\n  } else {\n    code = '';\n    // Cache non-trivial values to variables to prevent repeated look-ups.\n    let startVar = argument0;\n    if (!argument0.match(/^\\w+$/) && !stringUtils.isNumber(argument0)) {\n      startVar = generator.nameDB_!.getDistinctName(\n        variable0 + '_start',\n        NameType.VARIABLE,\n      );\n      code += 'var ' + startVar + ' = ' + argument0 + ';\\n';\n    }\n    let endVar = argument1;\n    if (!argument1.match(/^\\w+$/) && !stringUtils.isNumber(argument1)) {\n      endVar = generator.nameDB_!.getDistinctName(\n        variable0 + '_end',\n        NameType.VARIABLE,\n      );\n      code += 'var ' + endVar + ' = ' + argument1 + ';\\n';\n    }\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    const incVar = generator.nameDB_!.getDistinctName(\n      variable0 + '_inc',\n      NameType.VARIABLE,\n    );\n    code += 'var ' + incVar + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(Number(increment)) + ';\\n';\n    } else {\n      code += 'Math.abs(' + increment + ');\\n';\n    }\n    code += 'if (' + startVar + ' > ' + endVar + ') {\\n';\n    code += generator.INDENT + incVar + ' = -' + incVar + ';\\n';\n    code += '}\\n';\n    code +=\n      'for (' +\n      variable0 +\n      ' = ' +\n      startVar +\n      '; ' +\n      incVar +\n      ' >= 0 ? ' +\n      variable0 +\n      ' <= ' +\n      endVar +\n      ' : ' +\n      variable0 +\n      ' >= ' +\n      endVar +\n      '; ' +\n      variable0 +\n      ' += ' +\n      incVar +\n      ') {\\n' +\n      branch +\n      '}\\n';\n  }\n  return code;\n}\n\nexport function controls_forEach(block: Block, generator: CGenerator) {\n  // For each loop.\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 =\n    generator.valueToCode(block, 'LIST', Order.ASSIGNMENT) || '[]';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  let code = '';\n  // Cache non-trivial values to variables to prevent repeated look-ups.\n  let listVar = argument0;\n  if (!argument0.match(/^\\w+$/)) {\n    listVar = generator.nameDB_!.getDistinctName(\n      variable0 + '_list',\n      NameType.VARIABLE,\n    );\n    code += 'var ' + listVar + ' = ' + argument0 + ';\\n';\n  }\n  const indexVar = generator.nameDB_!.getDistinctName(\n    variable0 + '_index',\n    NameType.VARIABLE,\n  );\n  branch =\n    generator.INDENT +\n    variable0 +\n    ' = ' +\n    listVar +\n    '[' +\n    indexVar +\n    '];\\n' +\n    branch;\n  code += 'for (var ' + indexVar + ' in ' + listVar + ') {\\n' + branch + '}\\n';\n  return code;\n}\n\nexport function controls_flow_statements(\n  block: Block,\n  generator: CGenerator,\n) {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break;\\n';\n    case 'CONTINUE':\n      return xfix + 'continue;\\n';\n  }\n  throw Error('Unknown flow statement.');\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for math blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.math\n\nimport type {Block} from '../../core/block.js';\nimport type {CGenerator} from './c_generator.js';\nimport {Order} from './c_generator.js';\n\nexport function math_number(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Numeric value.\n  const number = Number(block.getFieldValue('NUM'));\n  // const order = number >= 0 ? Order.ATOMIC : Order.UNARY_NEGATION;//\n  const order = number >= 0 ? Order.ATOMIC : Order.UNARY;\n  return [String(number), order];\n}\n\nexport function math_arithmetic(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Basic arithmetic operators, and power.\n  const OPERATORS: Record<string, [string | null, Order]> = {\n    'ADD': [' + ', Order.ADDITION],\n    'MINUS': [' - ', Order.ADDITION], // subtraction has the same precedence as addition\n    'MULTIPLY': [' * ', Order.MULTIPLICATION],\n    'DIVIDE': [' / ', Order.MULTIPLICATION], // division has the same precedence as multiplication\n    'POWER': [null, Order.NONE], // Handle power separately.\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  let code;\n  // Power in C requires a special case since it has no operator.\n  if (!operator) {\n    code = 'pow(' + argument0 + ', ' + argument1 + ')';\n    return [code, Order.CALL];\n  }\n  code = argument0 + operator + argument1;\n  return [code, order];\n}\n\nexport function math_single(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let code;\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY) || '0';\n    if (arg[0] === '-') {\n      // --3 is not legal in JS.\n      arg = ' ' + arg;\n    }\n    code = '-' + arg;\n    return [code, Order.UNARY];\n  }\n  if (operator === 'SIN' || operator === 'COS' || operator === 'TAN') {\n    arg = generator.valueToCode(block, 'NUM', Order.MULTIPLICATION) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n  // First, handle cases which generate values that don't need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'ABS':\n      code = 'Math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'Math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'Math.log(' + arg + ')';\n      break;\n    case 'EXP':\n      code = 'Math.exp(' + arg + ')';\n      break;\n    case 'POW10':\n      code = 'Math.pow(10,' + arg + ')';\n      break;\n    case 'ROUND':\n      code = 'Math.round(' + arg + ')';\n      break;\n    case 'ROUNDUP':\n      code = 'Math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'Math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'Math.sin(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'COS':\n      code = 'Math.cos(' + arg + ' / 180 * Math.PI)';\n      break;\n    case 'TAN':\n      code = 'Math.tan(' + arg + ' / 180 * Math.PI)';\n      break;\n  }\n  if (code) {\n    return [code, Order.CALL];\n  }\n  // Second, handle cases which generate values that may need parentheses\n  // wrapping the code.\n  switch (operator) {\n    case 'LOG10':\n      code = 'Math.log(' + arg + ') / Math.log(10)';\n      break;\n    case 'ASIN':\n      code = 'Math.asin(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ACOS':\n      code = 'Math.acos(' + arg + ') / Math.PI * 180';\n      break;\n    case 'ATAN':\n      code = 'Math.atan(' + arg + ') / Math.PI * 180';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.MULTIPLICATION];\n}\n\nexport function math_constant(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS: Record<string, [string, Order]> = {\n    'PI': ['Math.PI', Order.MEMBER],\n    'E': ['Math.E', Order.MEMBER],\n    'GOLDEN_RATIO': ['(1 + Math.sqrt(5)) / 2', Order.MULTIPLICATION],\n    'SQRT2': ['Math.SQRT2', Order.MEMBER],\n    'SQRT1_2': ['Math.SQRT1_2', Order.MEMBER],\n    'INFINITY': ['Infinity', Order.ATOMIC],\n  };\n  type ConstantOption = keyof typeof CONSTANTS;\n  return CONSTANTS[block.getFieldValue('CONSTANT') as ConstantOption];\n}\n\nexport function math_number_property(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\n    'EVEN': [' % 2 === 0', Order.MULTIPLICATION, Order.EQUALITY],\n    'ODD': [' % 2 === 1', Order.MULTIPLICATION, Order.EQUALITY],\n    'WHOLE': [' % 1 === 0', Order.MULTIPLICATION, Order.EQUALITY],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATION, Order.EQUALITY],\n    'PRIME': [null, Order.NONE, Order.CALL],\n  };\n  type PropertyOption = keyof typeof PROPERTIES;\n  const dropdownProperty = block.getFieldValue('PROPERTY') as PropertyOption;\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck =\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = generator.provideFunction_(\n      'mathIsPrime',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n) {\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if (n == 2 || n == 3) {\n    return true;\n  }\n  // False if n is NaN, negative, is 1, or not whole.\n  // And false if n is divisible by 2 or 3.\n  if (isNaN(n) || n <= 1 || n % 1 !== 0 || n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  // Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for (var x = 6; x <= Math.sqrt(n) + 1; x += 6) {\n    if (n % (x - 1) === 0 || n % (x + 1) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n`,\n    );\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor =\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATION) || '0';\n    code = numberToCheck + ' % ' + divisor + ' === 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n}\n\nexport function math_change(block: Block, generator: CGenerator) {\n  // Add to a variable in place.\n  const argument0 =\n    generator.valueToCode(block, 'DELTA', Order.ADDITION) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return (\n    varName +\n    ' = (typeof ' +\n    varName +\n    \" === 'number' ? \" +\n    varName +\n    ' : 0) + ' +\n    argument0 +\n    ';\\n'\n  );\n}\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  let list;\n  let code;\n  switch (func) {\n    case 'SUM':\n      list = generator.valueToCode(block, 'LIST', Order.MEMBER) || '[]';\n      code = list + '.reduce(function(x, y) {return x + y;}, 0)';\n      break;\n    case 'MIN':\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = 'Math.min.apply(null, ' + list + ')';\n      break;\n    case 'MAX':\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = 'Math.max.apply(null, ' + list + ')';\n      break;\n    case 'AVERAGE': {\n      // mathMean([null,null,1,3]) === 2.0.\n      const functionName = generator.provideFunction_(\n        'mathMean',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  return myList.reduce(function(x, y) {return x + y;}, 0) / myList.length;\n}\n`,\n      );\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MEDIAN': {\n      // mathMedian([null,null,1,3]) === 2.0.\n      const functionName = generator.provideFunction_(\n        'mathMedian',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(myList) {\n  var localList = myList.filter(function (x) {return typeof x === 'number';});\n  if (!localList.length) return null;\n  localList.sort(function(a, b) {return b - a;});\n  if (localList.length % 2 === 0) {\n    return (localList[localList.length / 2 - 1] + localList[localList.length / 2]) / 2;\n  } else {\n    return localList[(localList.length - 1) / 2];\n  }\n}\n`,\n      );\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'MODE': {\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // Mode of [3, 'x', 'x', 1, 1, 2, '3'] -> ['x', 1].\n      const functionName = generator.provideFunction_(\n        'mathModes',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(values) {\n  var modes = [];\n  var counts = [];\n  var maxCount = 0;\n  for (var i = 0; i < values.length; i++) {\n    var value = values[i];\n    var found = false;\n    var thisCount;\n    for (var j = 0; j < counts.length; j++) {\n      if (counts[j][0] === value) {\n        thisCount = ++counts[j][1];\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      counts.push([value, 1]);\n      thisCount = 1;\n    }\n    maxCount = Math.max(thisCount, maxCount);\n  }\n  for (var j = 0; j < counts.length; j++) {\n    if (counts[j][1] === maxCount) {\n        modes.push(counts[j][0]);\n    }\n  }\n  return modes;\n}\n`,\n      );\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'STD_DEV': {\n      const functionName = generator.provideFunction_(\n        'mathStandardDeviation',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(numbers) {\n  var n = numbers.length;\n  if (!n) return null;\n  var mean = numbers.reduce(function(x, y) {return x + y;}) / n;\n  var variance = 0;\n  for (var j = 0; j < n; j++) {\n    variance += Math.pow(numbers[j] - mean, 2);\n  }\n  variance = variance / n;\n  return Math.sqrt(variance);\n}\n`,\n      );\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    case 'RANDOM': {\n      const functionName = generator.provideFunction_(\n        'mathRandomList',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list) {\n  var x = Math.floor(Math.random() * list.length);\n  return list[x];\n}\n`,\n      );\n      list = generator.valueToCode(block, 'LIST', Order.NONE) || '[]';\n      code = functionName + '(' + list + ')';\n      break;\n    }\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [code, Order.CALL];\n}\n\nexport function math_modulo(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Remainder computation.\n  const argument0 =\n    generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATION) || '0';\n  const argument1 =\n    generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATION) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MULTIPLICATION];\n}\n\nexport function math_constrain(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'LOW', Order.NONE) || '0';\n  const argument2 =\n    generator.valueToCode(block, 'HIGH', Order.NONE) || 'Infinity';\n  const code =\n    'Math.min(Math.max(' +\n    argument0 +\n    ', ' +\n    argument1 +\n    '), ' +\n    argument2 +\n    ')';\n  return [code, Order.CALL];\n}\n\nexport function math_random_int(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Random integer between [X] and [Y].\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const functionName = generator.provideFunction_(\n    'mathRandomInt',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(a, b) {\n  if (a > b) {\n    // Swap a and b to ensure a is smaller.\n    var c = a;\n    a = b;\n    b = c;\n  }\n  return Math.floor(Math.random() * (b - a + 1) + a);\n}\n`,\n  );\n  const code = functionName + '(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.CALL];\n}\n\nexport function math_random_float(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Random fraction between 0 and 1.\n  return ['Math.random()', Order.CALL];\n}\n\nexport function math_atan2(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'Math.atan2(' + argument1 + ', ' + argument0 + ') / Math.PI * 180',\n    Order.MULTIPLICATION,\n  ];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.procedures\n\nimport type {Block} from '../../core/block.js';\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\nimport type {CGenerator} from './c_generator.js';\nimport {Order} from './c_generator.js';\n\nexport function procedures_defreturn(\n  block: Block,\n  generator: CGenerator,\n) {\n  // Define a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n      generator.INDENT,\n    );\n  }\n  const branch = generator.statementToCode(block, 'STACK');\n  let returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + ';\\n';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = 'uint32_t '+ generator.getVariableName(variables[i]);\n  }\n  let code =\n    'uint32_t ' +\n    funcName +\n    '(' +\n    args.join(', ') +\n    ') {\\n' +\n    xfix1 +\n    loopTrap +\n    branch +\n    xfix2 +\n    returnValue +\n    '}';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected.\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\n  return null;\n}\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Call a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'null';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.CALL];\n}\n\nexport function procedures_callnoreturn(\n  block: Block,\n  generator: CGenerator,\n) {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](\n    block,\n    generator,\n  ) as [string, Order];\n  return tuple[0] + ';\\n';\n}\n\nexport function procedures_ifreturn(\n  block: Block,\n  generator: CGenerator,\n) {\n  // Conditionally return value from a procedure.\n  const condition =\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\n  let code = 'if (' + condition + ') {\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\n      generator.INDENT,\n    );\n  }\n  if ((block as IfReturnBlock).hasReturnValue_) {\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'null';\n    code += generator.INDENT + 'return ' + value + ';\\n';\n  } else {\n    code += generator.INDENT + 'return;\\n';\n  }\n  code += '}\\n';\n  return code;\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for text blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.texts\n\nimport type {Block} from '../../core/block.js';\nimport type {CGenerator} from './c_generator.js';\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\nimport {Order} from './c_generator.js';\n\n/**\n * Regular expression to detect a single-quoted string literal.\n */\nconst strRegExp = /^\\s*'([^']|\\\\')*'\\s*$/;\n\n/**\n * Enclose the provided value in 'String(...)' function.\n * Leave string literals alone.\n * @param value Code evaluating to a value.\n * @returns Array containing code evaluating to a string\n *     and the order of the returned code.[string, number]\n */\nconst forceString = function (value: string): [string, Order] {\n  if (strRegExp.test(value)) {\n    return [value, Order.ATOMIC];\n  }\n  return ['String(' + value + ')', Order.CALL];\n};\n\n/**\n * Returns an expression calculating the index into a string.\n * @param stringName Name of the string, used to calculate length.\n * @param where The method of indexing, selected by dropdown in Blockly\n * @param opt_at The optional offset when indexing from start/end.\n * @returns Index expression.\n */\nconst getSubstringIndex = function (\n  stringName: string,\n  where: string,\n  opt_at?: string,\n): string | undefined {\n  if (where === 'FIRST') {\n    return '0';\n  } else if (where === 'FROM_END') {\n    return stringName + '.length - 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return stringName + '.length - 1';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function text(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n}\n\nexport function text_multiline(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Text value.\n  const code = generator.multiline_quote_(block.getFieldValue('TEXT'));\n  const order = code.indexOf('+') !== -1 ? Order.ADDITION : Order.ATOMIC;\n  return [code, order];\n}\n\nexport function text_join(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Create a string made up of any number of elements of any type.\n  const joinBlock = block as JoinMutatorBlock;\n  switch (joinBlock.itemCount_) {\n    case 0:\n      return [\"''\", Order.ATOMIC];\n    case 1: {\n      const element =\n        generator.valueToCode(joinBlock, 'ADD0', Order.NONE) || \"''\";\n      const codeAndOrder = forceString(element);\n      return codeAndOrder;\n    }\n    case 2: {\n      const element0 =\n        generator.valueToCode(joinBlock, 'ADD0', Order.NONE) || \"''\";\n      const element1 =\n        generator.valueToCode(joinBlock, 'ADD1', Order.NONE) || \"''\";\n      const code = forceString(element0)[0] + ' + ' + forceString(element1)[0];\n      return [code, Order.ADDITION];\n    }\n    default: {\n      const elements = new Array(joinBlock.itemCount_);\n      for (let i = 0; i < joinBlock.itemCount_; i++) {\n        elements[i] =\n          generator.valueToCode(joinBlock, 'ADD' + i, Order.NONE) || \"''\";\n      }\n      const code = '[' + elements.join(',') + \"].join('')\";\n      return [code, Order.CALL];\n    }\n  }\n}\n\nexport function text_append(block: Block, generator: CGenerator) {\n  // Append to a variable in place.\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  const value = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const code = varName + ' += ' + forceString(value)[0] + ';\\n';\n  return code;\n}\n\nexport function text_length(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // String or array length.\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\n  return [text + '.length', Order.MEMBER];\n}\n\nexport function text_isEmpty(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\n  return ['!' + text + '.length', Order.UNARY];\n}\n\nexport function text_indexOf(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Search the text for a substring.\n  const operator =\n    block.getFieldValue('END') === 'FIRST' ? 'indexOf' : 'lastIndexOf';\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE', Order.MEMBER) || \"''\";\n  const code = text + '.' + operator + '(' + substring + ')';\n  // Adjust index if using one-based indices.\n  if (block.workspace.options.oneBasedIndex) {\n    return [code + ' + 1', Order.ADDITION];\n  }\n  return [code, Order.CALL];\n}\n\nexport function text_charAt(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const textOrder = where === 'RANDOM' ? Order.NONE : Order.MEMBER;\n  const text = generator.valueToCode(block, 'VALUE', textOrder) || \"''\";\n  switch (where) {\n    case 'FIRST': {\n      const code = text + '.charAt(0)';\n      return [code, Order.CALL];\n    }\n    case 'LAST': {\n      const code = text + '.slice(-1)';\n      return [code, Order.CALL];\n    }\n    case 'FROM_START': {\n      const at = generator.getAdjusted(block, 'AT');\n      // Adjust index if using one-based indices.\n      const code = text + '.charAt(' + at + ')';\n      return [code, Order.CALL];\n    }\n    case 'FROM_END': {\n      const at = generator.getAdjusted(block, 'AT', 1, true);\n      const code = text + '.slice(' + at + ').charAt(0)';\n      return [code, Order.CALL];\n    }\n    case 'RANDOM': {\n      const functionName = generator.provideFunction_(\n        'textRandomLetter',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(text) {\n  var x = Math.floor(Math.random() * text.length);\n  return text[x];\n}\n`,\n      );\n      const code = functionName + '(' + text + ')';\n      return [code, Order.CALL];\n    }\n  }\n  throw Error('Unhandled option (text_charAt).');\n}\n\nexport function text_getSubstring(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Dictionary of WHEREn field choices and their CamelCase equivalents. */\n  const wherePascalCase = {\n    'FIRST': 'First',\n    'LAST': 'Last',\n    'FROM_START': 'FromStart',\n    'FROM_END': 'FromEnd',\n  };\n  type WhereOption = keyof typeof wherePascalCase;\n  // Get substring.\n  const where1 = block.getFieldValue('WHERE1') as WhereOption;\n  const where2 = block.getFieldValue('WHERE2') as WhereOption;\n  const requiresLengthCall =\n    where1 !== 'FROM_END' &&\n    where1 !== 'LAST' &&\n    where2 !== 'FROM_END' &&\n    where2 !== 'LAST';\n  const textOrder = requiresLengthCall ? Order.MEMBER : Order.NONE;\n  const text = generator.valueToCode(block, 'STRING', textOrder) || \"''\";\n  let code;\n  if (where1 === 'FIRST' && where2 === 'LAST') {\n    code = text;\n    return [code, Order.NONE];\n  } else if (text.match(/^'?\\w+'?$/) || requiresLengthCall) {\n    // If the text is a variable or literal or doesn't require a call for\n    // length, don't generate a helper function.\n    let at1;\n    switch (where1) {\n      case 'FROM_START':\n        at1 = generator.getAdjusted(block, 'AT1');\n        break;\n      case 'FROM_END':\n        at1 = generator.getAdjusted(block, 'AT1', 1, false, Order.ADDITION);\n        at1 = text + '.length - ' + at1;\n        break;\n      case 'FIRST':\n        at1 = '0';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    let at2;\n    switch (where2) {\n      case 'FROM_START':\n        at2 = generator.getAdjusted(block, 'AT2', 1);\n        break;\n      case 'FROM_END':\n        at2 = generator.getAdjusted(block, 'AT2', 0, false, Order.ADDITION);\n        at2 = text + '.length - ' + at2;\n        break;\n      case 'LAST':\n        at2 = text + '.length';\n        break;\n      default:\n        throw Error('Unhandled option (text_getSubstring).');\n    }\n    code = text + '.slice(' + at1 + ', ' + at2 + ')';\n  } else {\n    const at1 = generator.getAdjusted(block, 'AT1');\n    const at2 = generator.getAdjusted(block, 'AT2');\n    // The value for 'FROM_END' and'FROM_START' depends on `at` so\n    // we add it as a parameter.\n    const at1Param =\n      where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '';\n    const at2Param =\n      where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '';\n    const functionName = generator.provideFunction_(\n      'subsequence' + wherePascalCase[where1] + wherePascalCase[where2],\n      `\nfunction ${\n        generator.FUNCTION_NAME_PLACEHOLDER_\n      }(sequence${at1Param}${at2Param}) {\n  var start = ${getSubstringIndex('sequence', where1, 'at1')};\n  var end = ${getSubstringIndex('sequence', where2, 'at2')} + 1;\n  return sequence.slice(start, end);\n}\n`,\n    );\n    code =\n      functionName +\n      '(' +\n      text +\n      // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n      // pass it.\n      (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', ' + at1 : '') +\n      (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', ' + at2 : '') +\n      ')';\n  }\n  return [code, Order.CALL];\n}\n\nexport function text_changeCase(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Change capitalization.\n  const OPERATORS = {\n    'UPPERCASE': '.toUpperCase()',\n    'LOWERCASE': '.toLowerCase()',\n    'TITLECASE': null,\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('CASE') as OperatorOption];\n  const textOrder = operator ? Order.MEMBER : Order.NONE;\n  const text = generator.valueToCode(block, 'TEXT', textOrder) || \"''\";\n  let code;\n  if (operator) {\n    // Upper and lower case are functions built into generator.\n    code = text + operator;\n  } else {\n    // Title case is not a native JavaScript function.  Define one.\n    const functionName = generator.provideFunction_(\n      'textToTitleCase',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str) {\n  return str.replace(/\\\\S+/g,\n      function(txt) {return txt[0].toUpperCase() + txt.substring(1).toLowerCase();});\n}\n`,\n    );\n    code = functionName + '(' + text + ')';\n  }\n  return [code, Order.CALL];\n}\n\nexport function text_trim(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Trim spaces.\n  const OPERATORS = {\n    'LEFT': \".replace(/^[\\\\s\\\\xa0]+/, '')\",\n    'RIGHT': \".replace(/[\\\\s\\\\xa0]+$/, '')\",\n    'BOTH': '.trim()',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  return [text + operator, Order.CALL];\n}\n\nexport function text_print(block: Block, generator: CGenerator) {\n  // Print statement.\n  var msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  // 在msg中字符串的结尾加换行符\n  msg = msg.slice(0, -1) + '\\\\n' + msg.slice(-1);\n  return 'printf(' + msg +');\\n';\n}\n\nexport function text_prompt_ext(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n  let code = 'window.prompt(' + msg + ')';\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'Number(' + code + ')';\n  }\n  return [code, Order.CALL];\n}\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_(\n    'textCount',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle) {\n  if (needle.length === 0) {\n    return haystack.length + 1;\n  } else {\n    return haystack.split(needle).length - 1;\n  }\n}\n`,\n  );\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Order.CALL];\n}\n\nexport function text_replace(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  // The regex escaping code below is taken from the implementation of\n  // goog.string.regExpEscape.\n  const functionName = generator.provideFunction_(\n    'textReplace',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement) {\n  needle = needle.replace(/([-()\\\\[\\\\]{}+?*.$\\\\^|,:#<!\\\\\\\\])/g, '\\\\\\\\$1')\n                 .replace(/\\\\x08/g, '\\\\\\\\x08');\n  return haystack.replace(new RegExp(needle, 'g'), replacement);\n}\n`,\n  );\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, Order.CALL];\n}\n\nexport function text_reverse(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.MEMBER) || \"''\";\n  const code = text + \".split('').reverse().join('')\";\n  return [code, Order.CALL];\n}\n","/**\n * @license\n * Copyright 2012 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for variable blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.variables\n\nimport type {Block} from '../../core/block.js';\nimport type {CGenerator} from './c_generator.js';\nimport {Order} from './c_generator.js';\n\nexport function variables_get(\n  block: Block,\n  generator: CGenerator,\n): [string, Order] {\n  // Variable getter.\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n}\n\nexport function variables_set(block: Block, generator: CGenerator) {\n  // Variable setter.\n  const argument0 =\n    generator.valueToCode(block, 'VALUE', Order.ASSIGNMENT) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + ';\\n';\n}\n","\nimport type { Block } from '../../core/block.js';\nimport type { CGenerator } from './c_generator.js';\n\nimport { Order } from './c_generator.js';\n\nimport { globalNames, globalStructNames, globalintNames, globalStructVarNames } from './c_generator.js';\n\nexport function custom_get_temparature(block: Block, generator: CGenerator): string {\n  const code = \"get_temparature();\"; // replace with actual C code\n  return code;\n}\nexport function char(block: Block, generator: CGenerator): string {\n  var nameValue = block.getFieldValue('NAME');\n  var contextValue = block.getFieldValue('context');\n\n  if (!nameValue || !contextValue) {\n    return 'NULL';\n  }\n\n  // Only add the name to globalNames if it's not already included.\n  if (!globalNames.includes(nameValue)) {\n    globalNames.push(nameValue);\n  }\n\n  var code = 'char ' + nameValue + '[] = \"' + contextValue + '\";\\n';\n  return code;\n}\n\nexport function string_(block: Block, generator: CGenerator): string {\n  var nameValue = block.getFieldValue('NAME');\n\n  if (!nameValue) {\n    return 'NULL';\n  }\n\n  // Only add the name to globalNames if it's not already included.\n  if (!globalNames.includes(nameValue)) {\n    globalNames.push(nameValue);\n  }\n\n  var code = 'char* ' + nameValue + ';\\n';\n  return code;\n}\n\nexport function customcharname(block: Block, generator: CGenerator): [string, Order] {\n  const name = block.getFieldValue('NAME');\n  return [name, Order.ATOMIC];\n}\n\nexport function customintname(block: Block, generator: CGenerator): [string, Order] {\n  const name = block.getFieldValue('NAME');\n  return [name, Order.ATOMIC];\n}\n\nexport function customStructname(block: Block, generator: CGenerator): [string, Order] {\n  const name = block.getFieldValue('NAME');\n  return [name, Order.ATOMIC];\n}\n\nexport function alarm_struct(block: Block, generator: CGenerator): [string, Order] {\n  var dropdown_name = block.getFieldValue('NAME');\n  var text_name = block.getFieldValue('TEXT');\n\n  if (!globalStructVarNames.includes(text_name)) {\n    globalStructVarNames.push(text_name);\n  }\n\n  var code = 'Struct ' + dropdown_name + ' ' + text_name + ';\\n';\n  code += generator.statementToCode(block, 'nextStatement');\n  return [code, Order.ATOMIC];\n}\n\nexport function uint32_t(block: Block, generator: CGenerator): string {\n  let variableName = block.getFieldValue('NAME');\n\n  if (!variableName) return 'NULL'; // Or handle this case differently\n\n  if (!globalintNames.includes(variableName)) {\n    globalintNames.push(variableName);\n  }\n\n  var code = 'uint32_t ' + variableName + ';\\n';\n  code += generator.statementToCode(block, 'nextStatement');\n  return code;\n}\n\nexport function string_set(block: Block, generator: CGenerator): string {\n  const variableName = block.getFieldValue('NAME');\n  const value = generator.valueToCode(block, 'VALUE', Order.ATOMIC);\n  var st_length = value.length + 1;\n  let realloc = 'char* ' + variableName + '= realloc(' + variableName +\n    ',' + st_length + ' * sizeof(char));\\n';\n  let memset = 'memset(' + variableName + ', 0 ,' + st_length + ' * sizeof(char));\\n';\n  let strcpy = 'strcpy(' + variableName + ',' + value + \");\\n\";\n\n  let code = realloc + memset + strcpy;\n\n  // Generate code for the next statement.\n  code += generator.statementToCode(block, 'nextStatement');\n\n  return code;\n}\n\nexport function int_set(block: Block, generator: CGenerator): string {\n  const variableName = block.getFieldValue('NAME');\n  const value = generator.valueToCode(block, 'VALUE', Order.ATOMIC);\n\n  // Generate code for the assignment.\n  let code = variableName + ' = ' + value + ';\\n';\n\n  // Generate code for the next statement.\n  code += generator.statementToCode(block, 'nextStatement');\n\n  return code;\n}\n\nexport function structure(block: Block, generator: CGenerator): string {\n  const name = block.getFieldValue('NAME');\n  let code = 'typedef struct {\\n';\n\n  let branch = generator.statementToCode(block, 'FIELDS');\n\n  if (!globalStructNames.includes(name)) {\n    globalStructNames.push(name);\n  }\n  // Add indentation and trim trailing spaces.\n  branch = generator.prefixLines(branch, '  ').replace(/\\s+$/, '');\n\n  code += branch;\n\n  code += '\\n} ' + name + ';\\n';\n\n  return code;\n};\n\nexport function dependent_dropdown_example(block: Block, generator: CGenerator): [string, Order] {\n  const code = '';\n  return [code, Order.ATOMIC];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating JavaScript for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.JavaScript.variablesDynamic\n\n// JavaScript is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Instantiate a CGenerator and populate it with the\n * complete set of block generator functions for JavaScript.  This is\n * the entrypoint for c_compressed.js.\n */\n\n// Former goog.module ID: Blockly.JavaScript.all\n\nimport {CGenerator} from './c/c_generator.js';\nimport * as colour from './c/colour.js';\nimport * as lists from './c/lists.js';\nimport * as logic from './c/logic.js';\nimport * as loops from './c/loops.js';\nimport * as math from './c/math.js';\nimport * as procedures from './c/procedures.js';\nimport * as text from './c/text.js';\nimport * as variables from './c/variables.js';\nimport * as variablesDynamic from './c/variables_dynamic.js';\nimport * as custom from './c/customs.js';\nexport * from './c/c_generator.js';\n\n/**\n * JavaScript code generator instance.\n * @type {!CGenerator}\n */\nexport const cGenerator = new CGenerator();\n\n// Install per-block-type generator functions:\nconst generators: typeof cGenerator.forBlock = {\n  ...colour,\n  ...lists,\n  ...logic,\n  ...loops,\n  ...math,\n  ...procedures,\n  ...text,\n  ...variables,\n  ...variablesDynamic,\n  ...custom,\n};\nfor (const name in generators) {\n  cGenerator.forBlock[name] = generators[name];\n}\n\n"]}